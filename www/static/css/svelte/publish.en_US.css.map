{
  "version": 3,
  "file": "publish.en_US.css",
  "sources": [
    "../../../../src/publish/App.html"
  ],
  "sourcesContent": [
    "<h2>{{{ \"Publish to Share & Embed\" }}}</h2>\n\n{{#if published}}\n<p>{{{ \"This chart has been published! If you make changes to the chart you will need to re-publish them.\" }}}</p>\n{{else}}\n<p>{{{ \"To <b>share</b> your chart or or <b>embed it to your website or CMS</b> you need to publish it. It will only be visible to people who know the chart URL.\" }}}</p>\n{{/if}}\n\n<button disabled=\"{{ publishing }}\" on:click=\"publish()\" class=\"btn-publish btn btn-primary btn-large\">\n    {{#if published}}\n    <span class=\"re-publish\"><i class=\"fa fa-fw fa-refresh {{publishing ? 'fa-spin' : ''}}\"></i> {{ \"Re-publish chart\" }}</span>\n    {{else}}\n    <span class=\"publish\"><i class=\"fa fa-fw {{publishing ? 'fa-refresh fa-spin' : 'fa-cloud-upload'}}\"></i> {{ \"Publish chart\" }}</span>\n    {{/if}}\n</button>\n\n{{#if needs_republish && !publishing}}\n<div class=\"btn-aside alert\">\n   {{{ \"You have changed the chart after its last publication. To make these changes show up you got to <b>publish the chart again</b>.\" }}}\n</div>\n{{/if}}\n{{#if published && !needs_republish && progress == 1 && !publishing}}\n<div class=\"alert alert-success\">\n   {{{ \"Congratulations, your chart can now be shared and embedded on your site.\" }}}\n</div>\n{{/if}}\n\n{{#if publish_error}}\n<div class=\"alert alert-error\">\n   {{{ publish_error }}}\n</div>\n{{/if}}\n\n{{#if publishing}}\n<div class=\"alert {{progress < 1 ? 'alert-info' : 'alert-success'}} publishing\">\n    {{ \"Your chart is now being prepared for publication and should be ready in a few seconds.\" }}\n    <div class=\"progress progress-striped active\">\n        <div class=\"bar {{progress < 1 ? '' : 'bar-success'}}\" ref:bar />\n    </div>\n</div>\n{{/if}}\n\n{{#if published}}\n<div style=\"margin-top:20px\">\n    <div class=\"block\">\n        <i class=\"icon fa fa-link fa-fw\"></i>\n        <div class=\"ctrls\">\n            <div class=\"h\">\n                <b>{{{ \"Share via URL\" }}}</b>\n                <div class=\"embed-options\">\n                    <label class=\"radio\"><input bind:group='shareurl_type' value='default' type=\"radio\" name=\"url-type\"> {{{ \"fullscreen\" }}}</label>\n                    {{#each plugin_shareurls as tpl}}\n                    <label class=\"radio\"><input bind:group='shareurl_type' value='{{tpl.id}}' type=\"radio\" name=\"url-type\"> {{{tpl.name}}}</label>\n                    {{/each}}\n                </div>\n            </div>\n            <div class=\"inpt\">\n                <a target=\"_blank\" class=\"share-url\" href=\"{{shareUrl}}\">{{shareUrl}}</a>\n            </div>\n        </div>\n        <div class=\"help\">\n            <span>?</span>\n            <div class=\"content\">\n                {{{ \"The <b>normal size</b> URL displays the chart exactly the size you created it, and is useful for sharing on social media sites. The <b>fullscreen</b> URL will show your chart sized to fill the entire browser window.\" }}}\n            </div>\n        </div>\n    </div>\n\n    <div class=\"block\">\n        <i class=\"icon fa fa-code fa-fw\"></i>\n        <div class=\"ctrls\">\n            <div class=\"h\">\n                <b>{{{ \"Copy Embed code\" }}}</b>\n                <div class=\"embed-options\">\n                    {{#each embed_templates as tpl}}\n                    <label class=\"radio\"><input type=\"radio\" bind:group='embed_type' value='{{tpl.id}}'> {{{ tpl.title }}}</label>\n                    {{/each}}\n                </div>\n            </div>\n            <div class=\"inpt\">\n                <input ref:embedInput type=\"text\" class=\"input embed-code\" readonly value=\"{{embedCode}}\" /> <button class=\"btn btn-copy\" on:click=\"copy(embedCode)\" title=\"copy\"><i class=\"fa fa-copy\"></i> {{ \"copy\" }}</button>\n                <div class=\"copy-success {{copy_success ? 'show':''}}\">\n                    {{ \"Embed code was copied to clipboard!\" }}\n                </div>\n            </div>\n        </div>\n        <div class=\"help\">\n            <span>?</span>\n            <div class=\"content\">\n                {{{ \"Copy and paste this HTML code into your website or CMS to embed your chart. The <b>responsive iframe</b> automatically adjusts its height to fit both headline and chart on different devices.\" }}}\n                {{#each embed_templates.slice(2) as tpl}}\n                <div><b>{{tpl.title}}:</b> {{{tpl.text}}}</div>\n                {{/each}}\n            </div>\n        </div>\n    </div>\n</div>\n{{/if}}\n\n<style>\n    div.progress {\n        margin-top: 8px;\n        margin-bottom: 4px;\n    }\n    input[type=radio] {\n        vertical-align: baseline!important;\n    }\n    a.share-url {\n        font-size: 18px;\n    }\n    .btn-aside.alert {\n        margin-left: 0;\n        margin-top: 7px;\n        max-width: 100%;\n    }\n\n    .copy-success {\n        font-size: 11px;\n        color: #9c9;\n        font-style: italic;\n        opacity: 0;\n        pointer-events: none;\n        transition: opacity 5s ease-in;\n        margin-top: -10px;\n        position: absolute;\n    }\n    .copy-success.show {\n        opacity: 1;\n        transition: none;\n    }\n    .embed-options {\n        display: inline-block;\n    }\n</style>\n\n<script>\n    // import Index from './Index.html';\n    // import Leaderboard from './Leaderboard.html';\n    // import Header from './Header.html';\n\n    import {getJSON, postJSON} from '../shared/utils';\n    import computeEmbedHeights from './compute-embed-heights';\n\n    var fakeProgress = 0;\n\n    export default {\n        components: {\n            // Index, Header, Leaderboard\n        },\n        computed: {\n\n            shareUrl (shareurl_type, chart, plugin_shareurls) {\n                if (shareurl_type == 'default') return chart.publicUrl;\n                let url = '';\n                plugin_shareurls.forEach(t => {\n                    if (t.id == shareurl_type) url = t.url.replace(/%chart_id%/g, chart.id);\n                });\n                return url;\n            },\n\n            embedCode (embed_type, chart) {\n                if (!chart.metadata || !chart.metadata.publish || !chart.metadata.publish['embed-codes']) return '';\n                return chart.metadata.publish['embed-codes']['embed-method-'+embed_type];\n            }\n        },\n        methods: {\n\n            publish () {\n                const me = this;\n                const chart = me.get('chart');\n                me.set({\n                    publishing: true,\n                    progress: 0,\n                    publish_error: false\n                });\n                // generate embed codes\n                chart.metadata.publish['embed-heights'] =\n                    computeEmbedHeights(chart, me.get('embed_templates'));\n                // update charts\n                me.set({chart});\n                // save embed heights and wait until it's done before\n                // we start to publish the chart\n                window.chart.attributes(chart).save().then((d) => {\n                    // publish chart\n                    postJSON(`/api/charts/${chart.id}/publish`, null, (res) => {\n                        if (res.status == 'ok') {\n                            me.publishFinished(res.data);\n                        } else {\n                            me.set({publish_error: res.message });\n                        }\n                    });\n                    fakeProgress = 0;\n                    me.updateStatus();\n                });\n            },\n\n            updateProgressBar (p) {\n                if (this.refs.bar) {\n                    this.refs.bar.style.width = (p*100).toFixed()+'%';\n                }\n            },\n\n            updateStatus () {\n                const me = this;\n                const chart = me.get('chart');\n                fakeProgress += 0.05;\n                getJSON(`/api/charts/${chart.id}/publish/status`, (res) => {\n                    if (res) {\n                        res = (+res / 100) + fakeProgress;\n                        me.set({progress: Math.min(1,res)});\n                    }\n                    if (me.get('publishing')) {\n                        setTimeout(() => { me.updateStatus(); },400);\n                    }\n                });\n            },\n\n            publishFinished (chartInfo) {\n                this.set({\n                    progress: 1,\n                    published: true,\n                    needs_republish: false\n                });\n                setTimeout(() => this.set({publishing: false}), 500);\n                this.set({ chart: chartInfo });\n                window.chart.attributes(chartInfo);\n            },\n\n            copy (embedCode) {\n                const me = this;\n                console.log('COPY', embedCode);\n                me.refs.embedInput.select();\n                try {\n                    var successful = document.execCommand('copy');\n                    var msg = successful ? 'successful' : 'unsuccessful';\n                    if (successful) {\n                        me.set({copy_success: true});\n                        setTimeout(() => me.set({copy_success:false}), 300);\n                    }\n                } catch (err) {\n                    // console.log('Oops, unable to copy');\n                }\n            }\n        },\n\n        oncreate() {\n            const me = this;\n            me.observe('publishing', (p) => {\n                if (p) me.updateProgressBar(me.get('progress'));\n            });\n            me.observe('progress', (p) => {\n                me.updateProgressBar(p);\n            });\n            // persist embed_type and shareurl\n            me.observe('embed_type', (v) => {\n                const data = window.dw.backend.__userData;\n                if (!v || !data) return;\n                data.embed_type = v;\n                window.dw.backend.setUserData(data);\n            });\n\n            me.observe('shareurl_type', (v) => {\n                const data = window.dw.backend.__userData;\n                if (!v || !data) return;\n                data.shareurl_type = v;\n                window.dw.backend.setUserData(data);\n            });\n        }\n    };\n</script>\n\n\n\n"
  ],
  "names": [],
  "mappings": "AAoGI,GAAG,SAAS,kBAAC,CAAC,AACV,UAAU,CAAE,GAAG,CACf,aAAa,CAAE,GAAG,AACtB,CAAC,AACD,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAC,CAAC,AACf,cAAc,CAAE,QAAQ,UAAU,AACtC,CAAC,AACD,CAAC,UAAU,kBAAC,CAAC,AACT,SAAS,CAAE,IAAI,AACnB,CAAC,AACD,UAAU,MAAM,kBAAC,CAAC,AACd,WAAW,CAAE,CAAC,CACd,UAAU,CAAE,GAAG,CACf,SAAS,CAAE,IAAI,AACnB,CAAC,AAED,aAAa,kBAAC,CAAC,AACX,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,CAAC,CACV,cAAc,CAAE,IAAI,CACpB,UAAU,CAAE,OAAO,CAAC,EAAE,CAAC,OAAO,CAC9B,UAAU,CAAE,KAAK,CACjB,QAAQ,CAAE,QAAQ,AACtB,CAAC,AACD,aAAa,KAAK,kBAAC,CAAC,AAChB,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,IAAI,AACpB,CAAC,AACD,cAAc,kBAAC,CAAC,AACZ,OAAO,CAAE,YAAY,AACzB,CAAC"
}