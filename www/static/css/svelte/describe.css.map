{
  "version": 3,
  "file": "describe.css",
  "sources": [
    "../../../../src/describe/Handsontable.html"
  ],
  "sourcesContent": [
    "\n<div id=\"data-preview\" ref:hot />\n\n<script>\n    // import '/static/plugins/simple-maps/vendor/hot/handsontable.full.js?foo';\n    import HOT from 'Handsontable';\n\n    export default {\n        oncreate() {\n            const {table} = this.get();\n\n            const cells = (row, col, prop) => {\n                const {readonly, dataset} = this.get();\n                return {\n                    readOnly: readonly || dataset.column(col).isComputed && row === 0,\n                    renderer: getCellRenderer(dataset, HOT, {})\n                };\n            };\n\n            const hot = new HOT(this.refs.hot, {\n                data: [],\n                rowHeaders: true,\n                colHeaders: true,\n                fixedRowsTop: 1,\n                filters: true,\n                dropdownMenu: true,\n                startRows: 60,\n                startCols: 8,\n                fillHandle: false,\n                stretchH: 'all',\n                manualColumnMove: true,\n                comments: true,\n                contextMenu: true,\n                columnSorting: true,\n                sortIndicator: true,\n                cells\n            });\n            window.HT = hot;\n\n            HOT.hooks.add('afterSetDataAtCell', (a,b,c,d) => {\n                console.log('afterSetDataAtCell', a,b,c,d);\n                // this.set({table});\n            });\n\n            this.observe('dataset', (dataset) => {\n                if (!dataset || !dataset.list) return;\n                var header = [];\n                var data = [[]];\n                dataset.eachColumn((c) => data[0].push(c.title()));\n                dataset.eachRow((r,i) => {\n                    var row = [];\n                    dataset.eachColumn((col) => {\n                        row.push(col.val(r));\n                    });\n                    data.push(row);\n                });\n                hot.loadData(data);\n                hot.updateSettings({cells});\n                // comments\n                const comments = hot.getPlugin('comments');\n                comments.setCommentAtCell(2,2, 'Original: foobar');\n                comments.updateCommentMeta(2,2, {readOnly:true});\n                hot.render();\n            });\n\n        },\n        data() {\n            return {\n                dataset: null,\n                table: [\n                    {id: 1, name: 'Ted Right', address: ''},\n                    {id: 2, name: 'Frank Honest', address: ''},\n                    {id: 3, name: 'Joan Well', address: ''},\n                    {id: 4, name: 'Gail Polite', address: ''},\n                    {id: 5, name: 'Michael Fair', address: ''}\n                ]\n            };\n        }\n    };\n\n    function getCellRenderer(dataset, Handsontable, metadata) {\n        const colTypeIcons = {\n            date: 'fa fa-clock-o'\n        };\n        function HtmlCellRender(instance, TD, row, col, prop, value, cellProperties) {\n            var escaped = dw.utils.purifyHtml(Handsontable.helper.stringify(value));\n            TD.innerHTML = escaped; //this is faster than innerHTML. See: https://github.com/warpech/jquery-handsontable/wiki/JavaScript-&-DOM-performance-tips\n        }\n        return function(instance, td, row, col, prop, value, cellProperties) {\n            var column = dataset.column(col);\n            if (row > 0) {\n                var formatter = chart.columnFormatter(column);\n                value = formatter(column.val(row - 1), true);\n            }\n            if (parseInt(value, 10) < 0) { //if row contains negative number\n                td.classList.add('negative');\n            }\n            td.classList.add(column.type()+'Type');\n\n            if (row === 0) {\n                td.classList.add('firstRow');\n                if (colTypeIcons[column.type()]) {\n                    value = '<i class=\"'+colTypeIcons[column.type()]+'\"></i> ' + value;\n                }\n            } else {\n                td.classList.add(row % 2 ? 'oddRow' : 'evenRow');\n            }\n\n            // if (metadata.columnFormat.get(column.name()).ignore) {\n            //     td.classList.add('ignored');\n            // }\n            // if(selectedColumns.indexOf(col) > -1) {\n            //     td.classList.add('area'); //add blue area background if this cell is in selected column\n            // }\n            if (row > 0 && !column.type(true).isValid(column.val(row-1))) {\n                td.classList.add('parsingError');\n            }\n            if (cellProperties.readOnly) td.classList.add('readOnly');\n\n            if (chart.dataCellChanged(col, row)) {\n                td.classList.add('changed');\n            }\n            HtmlCellRender.apply(this, arguments);\n        };\n    }\n\n</script>\n\n<style>:global(#data-preview) {\n  width: 770px;\n  height: 500px;\n  max-height: 500px;\n  overflow: auto;\n}\n:global(#data-preview) tr td,\n:global(#data-preview) tr th {\n  font-family: 'Roboto Mono', fixed;\n  font-size: 12px;\n}\n:global(#data-preview) tr td {\n  padding: 3px 6px;\n}\n:global(#data-preview) tr td.textType {\n  color: #000000;\n}\n:global(#data-preview) tr td.dateType {\n  color: #39A832;\n  text-align: center;\n}\n:global(#data-preview) tr td.numberType {\n  color: #297EA8;\n  text-align: right;\n}\n:global(#data-preview) tr td.parsingError {\n  background: #fee;\n  color: #c00;\n}\n:global(#data-preview) tr td.readOnly.firstRow {\n  background: #EAEAEA;\n  border-right-color: #aaa;\n  color: #777;\n}\n:global(#data-preview) tr td.changed {\n  position: relative;\n}\n:global(#data-preview) tr td.changed:before {\n  content: ' ';\n  width: 0;\n  height: 0;\n  border-top: 7px solid orange;\n  border-right: 7px solid transparent;\n  display: block;\n  position: absolute;\n  left: 0;\n  top: 0;\n}\n:global(#data-preview) tbody tr:first-child td {\n  background: #f3f3f3;\n  font-weight: bold;\n  border-bottom: 1px solid #999;\n}\n:global(#data-preview) .htCommentCell:after {\n  border-left: 8px solid transparent;\n  border-top: 8px solid orange;\n}\n</style>\n"
  ],
  "names": [],
  "mappings": "AAgIe,aAAa,AAAE,CAAC,AAC7B,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,KAAK,CACjB,QAAQ,CAAE,IAAI,AAChB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,CACpB,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,AAAC,CAAC,AAC5B,WAAW,CAAE,aAAa,CAAC,CAAC,KAAK,CACjC,SAAS,CAAE,IAAI,AACjB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,AAAC,CAAC,AAC5B,OAAO,CAAE,GAAG,CAAC,GAAG,AAClB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,SAAS,AAAC,CAAC,AACrC,KAAK,CAAE,OAAO,AAChB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,SAAS,AAAC,CAAC,AACrC,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,MAAM,AACpB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,WAAW,AAAC,CAAC,AACvC,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,KAAK,AACnB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,aAAa,AAAC,CAAC,AACzC,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,IAAI,AACb,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,SAAS,SAAS,AAAC,CAAC,AAC9C,UAAU,CAAE,OAAO,CACnB,kBAAkB,CAAE,IAAI,CACxB,KAAK,CAAE,IAAI,AACb,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,AAAC,CAAC,AACpC,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,OAAO,AAAC,CAAC,AAC3C,OAAO,CAAE,GAAG,CACZ,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,MAAM,CAC5B,YAAY,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CACnC,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,AACR,CAAC,AACO,aAAa,AAAC,CAAC,KAAK,CAAC,EAAE,YAAY,CAAC,EAAE,AAAC,CAAC,AAC9C,UAAU,CAAE,OAAO,CACnB,WAAW,CAAE,IAAI,CACjB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC/B,CAAC,AACO,aAAa,AAAC,CAAC,cAAc,MAAM,AAAC,CAAC,AAC3C,WAAW,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CAClC,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,MAAM,AAC9B,CAAC"
}