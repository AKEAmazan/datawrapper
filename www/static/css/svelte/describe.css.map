{
  "version": 3,
  "file": "describe.css",
  "sources": [
    "../../../../src/describe/App.html",
    "../../../../src/describe/Handsontable.html",
    "../../../../src/describe/ComputedColumnEditor.html",
    "../../../../src/controls/Checkbox.html"
  ],
  "sourcesContent": [
    "<div class=\"chart-editor\">\n    <div class=\"row\">\n        <div class=\"span4\">\n            <div class=\"sidebar\">\n                {{#if customColumn}}\n\n                <ComputedColumnEditor\n                    bind:column=\"customColumn\"\n                    bind:formula\n                    bind:columns\n                    on:focus=\"cmFocus()\" />\n\n                {{elseif columnFormat}}\n                COLUMN FORMAT FOR {{columnFormat.title()}}\n\n                Hide Column\n\n                etc\n\n                {{else}}\n                <h3 class=\"first\">{{ \"Überprüfe dass die Daten richtig aussehen\" }}</h3>\n\n                <p>{{ \"Interpretiert Datawrapper deine Daten korrekt? In der nebenstehenden Tabelle sollten Zahlenspalten in blau, Datums-Spalten in grün und Textspalten in schwarz angezeigt werden.\" }}</p>\n\n                <Checkbox\n                    label=\"{{ \"Erste Zeile als Beschriftung\" }}\"\n                    bind:value=\"firstRowIsHeader\" />\n\n                [TODO: hook]\n                <hr>\n\n                <div class=\"btn-group\">\n                    <a class=\"btn submit\" href=\"upload\"><i class=\"icon-chevron-left\"></i> Zurück</a>\n                    <a href=\"visualize\" class=\"submit btn btn-primary\" id=\"describe-proceed\">Weiter <i class=\"icon-chevron-right icon-white\"></i></a>\n                </div>\n                {{/if}}\n            </div>\n        </div>\n        <div class=\"span8\">\n\n            <button class=\"btn transpose\" on:click=\"toggleTranspose()\"><img src=\"/static/css/chart-editor/transpose.png\"> {{\"Zeilen und Spalten vertauschen (transponieren)\"}}</button>\n\n            <div class=\"search-box pull-right\">\n                <i class=\"fa fa-search\"></i>\n                <div class=\"input-append\">\n                    <input type=\"text\" on:keypress=\"keyPress(event)\" placeholder=\"{{\"Search data table\"}}\" bind:value=\"search\" ref:search class=\"{{searchResults.length > 0?'with-results':''}}\" />\n                    {{#if searchResults.length > 0}}\n                    <div class=\"btn-group\">\n                      <button class=\"btn\" on:click=\"nextResult(-1)\">\n                        <i class=\"fa fa-chevron-up\"></i></button>\n                      <button class=\"btn\" on:click=\"nextResult(+1)\">\n                        <i class=\"fa fa-chevron-down\"></i></button>\n                    </div>\n                    {{/if}}\n                </div>\n\n                {{#if search}}\n                <div class=\"results\">\n                    {{#if searchResults.length > 0}}\n                        {{searchIndexSafe+1}}\n                        {{\"von\" }}\n                        {{searchResults.length}}\n                        {{\"Treffern\" }}\n                    {{elseif search}}\n                        {{ \"Keine Treffer\" }}\n                    {{/if}}\n                </div>\n                {{/if}}\n            </div>\n\n            <Handsontable ref:hot\n                bind:data=\"chartData\"\n                bind:transpose\n                bind:firstRowIsHeader\n                bind:activeColumn\n                bind:search\n                bind:searchResults\n                bind:searchIndex />\n\n            <div class=\"buttons below-table pull-right\">\n                <button class=\"btn computed-columns\"><i class=\"fa fa-calculator\"></i> {{\"Spalte hinzufügen\"}}...</button>\n\n                <button on:click=\"revertChanges()\" class=\"btn {{has_changes?'':'disabled'}}\" id=\"reset-data-changes\"><i class=\"fa fa-undo\"></i> {{\"Änderungen zurücksetzen\"}}...</button>\n            </div>\n        </div>\n    </div>\n</div>\n\n<script>\n    /* global chart */\n    import Handsontable from './Handsontable.html';\n    import ComputedColumnEditor from './ComputedColumnEditor.html';\n    import Checkbox from '../controls/Checkbox.html';\n\n    export default {\n        components: { Handsontable, Checkbox, ComputedColumnEditor },\n        computed: {\n            searchIndexSafe (searchIndex, searchResults) {\n                if (searchIndex<0) searchIndex+=searchResults.length;\n                searchIndex = searchIndex % searchResults.length;\n                return searchIndex;\n            },\n            customColumn (activeColumn) {\n                return activeColumn && activeColumn.isComputed ? activeColumn : false;\n            },\n            columnFormat (activeColumn) {\n                return activeColumn && !activeColumn.isComputed ? activeColumn : false;\n            },\n            columns (activeColumn) {\n                if (!activeColumn) return [];\n                try {\n                    const ds = chart.dataset();\n                    return ds.columns().filter(col => !col.isComputed);\n                } catch(e) {\n                    return [];\n                }\n            }\n        },\n        oncreate() {\n            window.addEventListener('keypress', (event) => {\n                if (event.ctrlKey && event.key == 'f') {\n                    event.preventDefault();\n                    if (this.refs.search != window.document.activeElement) {\n                        this.refs.search.focus();\n                    } else {\n                        this.nextResult(+1);\n                    }\n                }\n            });\n            const sync = (svelte_key, metadata_key) => {\n                this.observe(svelte_key, (svelte_value) => {\n                    this.store.get('dw_chart').set(`metadata.${metadata_key}`, svelte_value);\n                });\n            };\n            sync('transpose', 'data.transpose');\n            sync('firstRowIsHeader', 'data.horizontal-header');\n\n            this.observe('customColumn', (col, old) => {\n                if (col && col != old) {\n                    const chart = this.store.get('dw_chart');\n                    const customCols = chart.get('metadata.describe.computed-columns', {});\n                    this.set({formula: customCols[col.name()] || ''});\n                }\n            });\n\n            this.observe('formula', (formula) => {\n                const {customColumn} = this.get();\n                const chart = this.store.get('dw_chart');\n                if (customColumn) {\n                    const customCols = chart.get('metadata.describe.computed-columns', {});\n                    customCols[customColumn.name()] = formula;\n                    chart.set('metadata.describe.computed-columns', customCols);\n                    chart.saveSoon();\n                    this.refs.hot.update();\n                }\n            });\n        },\n        methods: {\n            nextResult (diff) {\n                let {searchIndex, searchResults} = this.get();\n                searchIndex += diff;\n                if (searchIndex<0) searchIndex+=searchResults.length;\n                searchIndex = searchIndex % searchResults.length;\n                this.set({searchIndex});\n            },\n            keyPress (event) {\n                if (event.key == 'F3' || event.key == 'Enter')\n                    this.nextResult(event.shiftKey ? -1 : 1);\n            },\n            toggleTranspose() {\n                this.set({transpose: !this.get('transpose')});\n            },\n            revertChanges() {\n                const chart = this.store.get('dw_chart');\n                chart.set('metadata.data.changes', []);\n                chart.saveSoon();\n                this.refs.hot.update();\n            },\n            cmFocus () {\n                setTimeout(() => {\n                    this.refs.hot.get('hot').render();\n                }, 100);\n            }\n        },\n        data() {\n            return {\n                search: '',\n                chartData: '',\n                transpose: false,\n                firstRowIsHeader: true,\n                searchIndex: 0,\n                activeColumn: false,\n                customColumn: false,\n                columnFormat: false,\n                formula: '',\n                searchResults: []\n            };\n        }\n    };\n</script>\n\n<style>.below-table {\n  margin-top: 20px;\n}\n.span8 {\n  padding-top: 1em;\n}\n.btn.transpose img {\n  width: 12px;\n  vertical-align: baseline;\n}\n.search-box {\n  position: relative;\n}\n.search-box .results {\n  color: gray;\n  display: inline-block;\n  vertical-align: text-bottom;\n  margin-left: 1ex;\n}\n.search-box input {\n  padding-left: 26px;\n  border-radius: 4px;\n  width: 24ex;\n}\n.search-box input.with-results {\n  width: 18ex;\n  border-bottom-right-radius: 0px;\n  border-top-right-radius: 0px;\n}\n.search-box .fa-search {\n  position: absolute;\n  left: 8px;\n  top: 6px;\n  color: #ddd;\n  font-size: 16px;\n  z-index: 4;\n}\n.search-box .btn-group .btn:first-child {\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 0;\n}\n</style>\n",
    "<div id=\"data-preview\" ref:hot />\n\n{{activeColumn}}\n\n\n<script>\n    /* global dw,chart */\n    import HOT from 'Handsontable';\n\n    export default {\n        methods: {\n            update() {\n                const {data, transpose, firstRowIsHeader, skipRows, hot} = this.get();\n\n                if (!data) return;\n\n                // get chart\n                const chart = this.store.get('dw_chart');\n\n                // pass dataset through chart to apply changes and computed columns\n                const ds = chart.dataset(dw.datasource.delimited({\n                    csv: data,\n                    transpose,\n                    firstRowIsHeader,\n                    skipRows\n                }).parse()).dataset();\n\n                this.set({columnOrder: ds.columnOrder()});\n\n                // construct HoT data array\n                const hot_data = [[]];\n                ds.eachColumn(c => hot_data[0].push(c.title()));\n\n                ds.eachRow(r => {\n                    const row = [];\n                    ds.eachColumn(col => row.push(col.raw(r)));\n                    hot_data.push(row);\n                });\n\n                // pass data to hot\n                hot.loadData(hot_data);\n\n                hot.updateSettings({\n                    cells: (row, col) => {\n                        const {readonly} = this.get();\n                        return {\n                            readOnly: readonly || (ds.numColumns() > col && ds.column(col).isComputed && row === 0),\n                            renderer: getCellRenderer(this, ds, HOT, {})\n                        };\n                    },\n                    manualColumnMove: []\n                });\n\n                this.set({ds});\n                this.set({has_changes: chart.get('metadata.data.changes', []).length > 0})\n\n                hot.render();\n            },\n            dataChanged (cells) {\n                const {hot} = this.get();\n                let changed = false;\n                cells.forEach(([row, col, old_val, new_val]) => {\n                    if (old_val != new_val) {\n                        const chart = this.store.get('dw_chart');\n                        const {transpose} = this.get();\n                        const changes = chart.get('metadata.data.changes');\n                        row = hot.toPhysicalRow(row);\n                        if (transpose) {\n                            // swap row and col\n                            const tmp = row;\n                            row = col;\n                            col = tmp;\n                        }\n                        // store new change\n                        changes.push({\n                            row, column: col, value: new_val, time: (new Date()).getTime()\n                        });\n                        chart.set('metadata.data.changes', changes);\n                        changed = true;\n                    }\n                })\n                if (changed) {\n                    setTimeout(() => {\n                        this.update();\n                        chart.save();\n                    }, 100);\n                }\n            },\n            columnMoved (srcColumns, tgtIndex) {\n                const {hot} = this.get();\n                if (!srcColumns.length) return;\n                const {columnOrder} = this.get();\n                const newOrder = columnOrder.slice(0);\n                const after = columnOrder[tgtIndex];\n                const elements = newOrder.splice(srcColumns[0], srcColumns.length);\n                const insertAt = after ? newOrder.indexOf(after) : newOrder.length;\n                newOrder.splice(insertAt, 0, ...elements);\n                this.store.get('dw_chart').set('metadata.data.column-order', newOrder.slice(0));\n                this.set({columnOrder: newOrder});\n                // update selection\n                HOT.hooks.once('afterRender', () => {\n                    setTimeout(() => {\n                        hot.selectCell(0, insertAt, hot.countRows()-1, insertAt+elements.length-1);\n                    }, 10);\n                });\n                this.update();\n            },\n            updateHeight () {\n                const h = document.querySelector('.ht_master.handsontable .wtHolder .wtHider').getBoundingClientRect().height;\n                this.refs.hot.style.height = Math.min(400, h+10)+'px';\n            },\n            checkRange (r,c,r2,c2) {\n                // check if\n                // 1. only a single column is selected, and\n                // 2. the range starts at the first row, and\n                // 3. the range extends through he last row\n                const {hot} = this.get();\n                if (c == c2 && r === 0 && r2 == hot.countRows()-1) {\n                    // const chart = this.store.get('dw_chart');\n                    // this.set({activeColumn: chart.dataset().column(c)});\n                    return;\n                }\n                this.set({activeColumn:null});\n            },\n            initCustomEvents () {\n                // wait a bit to make sure HoT is rendered\n                setTimeout(() => {\n                    const {hot} = this.get();\n                    // catch click events on A,B,C,D... header row\n                    this.refs.hot.querySelectorAll('.htCore thead th+th').forEach(th => {\n                        th.addEventListener('click', evt => {\n                            // reset the HoT selection\n                            hot.deselectCell();\n                            evt.preventDefault();\n                            evt.stopPropagation();\n                            // find out which data column we're in\n                            const k = th.parentNode.children.length;\n                            let th_i = -1;\n                            // (stupid HTMLCollection has no indexOf)\n                            for (let i=0; i<k; i++) {\n                                if (th.parentNode.children.item(i) == th) {\n                                    th_i = i;\n                                    break;\n                                }\n                            }\n                            // find column index\n                            const col_i = this.refs.hot.querySelector(`.htCore tbody tr:first-child td:nth-child(${th_i+1})`).dataset.column;\n                            const chart = this.store.get('dw_chart');\n                            const {activeColumn} = this.get();\n                            const newActive = chart.dataset().column(+col_i);\n                            // set active column (or unset if it's already set)\n                            this.set({activeColumn: newActive == activeColumn ? false : newActive});\n                        });\n                    });\n                }, 500);\n            }\n        },\n        computed: {\n            currentResult (searchResults, searchIndex) {\n                if (!searchResults || !searchResults.length) return null;\n                const l = searchResults.length;\n                if (searchIndex < 0 || searchIndex >= l) {\n                    while (searchIndex<0) searchIndex += l;\n                    if (searchIndex > l) searchIndex %= l;\n                }\n                return searchResults[searchIndex];\n            }\n        },\n        oncreate() {\n\n            HOT.hooks.once('afterRender', () => this.initCustomEvents());\n\n            const chart = this.store.get('dw_chart');\n\n            const hot = new HOT(this.refs.hot, {\n                data: [],\n                rowHeaders: (i) => {\n                    const ti = hot.getPlugin('ColumnSorting').translateRow(i);\n                    return ti+1;\n                },\n                colHeaders: true,\n                fixedRowsTop: 1,\n                filters: true,\n                dropdownMenu: true,\n                startRows: 13,\n                startCols: 8,\n                fillHandle: false,\n                stretchH: 'all',\n                height: 400,\n                manualColumnMove: true,\n                selectionMode: 'range',\n                autoColumnSize: {useHeaders: true},\n                // comments: true,\n                // contextMenu: true,\n\n                // sorting\n                columnSorting: true,\n                sortIndicator: true,\n                sortFunction: function(sortOrder, columnMeta) {\n                    return function(a, b) {\n                        var plugin = hot.getPlugin('columnSorting');\n                        var sortFunction;\n                        if (a[0] === 0) return -1;\n                        switch (columnMeta.type) {\n                            case 'date':\n                                sortFunction = plugin.dateSort;\n                                break;\n                            case 'numeric':\n                                sortFunction = plugin.numericSort;\n                                break;\n                            default:\n                                sortFunction = plugin.defaultSort;\n                        }\n                        return sortFunction(sortOrder, columnMeta)(a, b);\n                    };\n                },\n                afterGetColHeader: (col, th) => {\n                    const {activeColumn, ds} = this.get();\n                    if (!ds) return;\n                    if (col && ds.column(col) == activeColumn) {\n                        th.classList.add('selected');\n                    }\n                    return;\n                    // console.log(chart.dataset().column(col), activeColumn, th);\n                    // if (selectedColumns.indexOf(col) !== -1) {\n                    //     TH.classList.add('selected');\n                    // }\n\n                    // var serie = getSeriesOfIndex(col);\n                    // if(metadata.columnFormat.get(serie).ignore) {\n                    //     TH.classList.add('ignored');\n                    // }\n                    // else {\n                    //     TH.classList.remove('ignored');\n                    // }\n                },\n                // search\n                search: 'search'\n            });\n\n            window.HT = hot;\n            this.set({hot});\n\n            HOT.hooks.add('afterSetDataAtCell', (a) => this.dataChanged(a));\n            HOT.hooks.add('afterColumnMove', (a,b) => this.columnMoved(a,b));\n            HOT.hooks.add('afterRender', () => this.updateHeight());\n            HOT.hooks.add('afterSelection', (r,c,r2,c2) => this.checkRange(r,c,r2,c2));\n\n            // HOT.hooks.add()\n            // $dataPreview.on('mousedown', '.ht_clone_top.handsontable th:has(.colHeader)', function (event) {\n            //     start = getIndexOfTh(this);\n            //     event.stopPropagation();\n            //     $dataPreview.handsontable('deselectCell');\n\n            //     if (selectedColumns.length == 1 && selectedColumns[0] == start) {\n            //         // proceeding click on selected column header will unselect\n            //         deselectColumns();\n            //         $dataPreview.handsontable('render'); // refresh all cells and column headers\n            //         showColumnSettings();\n            //         return;\n            //     }\n            //     setTimeout(function() { //do it in timeout, so input blur has chance to run\n            //         selectColumns(start);\n            //     }, 0);\n            // });\n\n            this.observe('data', () => this.update());\n            this.observe('transpose', () => this.update());\n            this.observe('firstRowIsHeader', () => this.update());\n\n            this.observe('search', (query) => {\n                const searchResults = hot.search.query(query);\n                this.set({searchResults});\n                hot.render();\n            });\n\n            this.observe('currentResult', (res) => {\n                // console.log('cur search res', res);\n                if (!res || !hot) return;\n                // this is a weird hack to deal with HoT's problems to scroll\n                // all the way down after hot.scrollViewportTo(hot.countRows()-1, res.col);\n                // the first scrollViewportTo will trigger a render event\n                hot.render(); // to update the hightlight colors\n                hot.scrollViewportTo(res.row, res.col);\n                setTimeout(() => {\n                    // one more time\n                    hot.scrollViewportTo(res.row, res.col);\n                }, 100);\n            });\n\n            this.observe('activeColumn', () => hot.render());\n\n        },\n        data() {\n            return {\n                data: '',\n                readonly: false,\n                skipRows: 0,\n                firstRowIsHeader: true,\n                searchIndex: 0,\n                transpose: false,\n                activeColumn: null,\n                search: '',\n                searchResults: []\n            };\n        }\n    };\n\n    function getCellRenderer(app, dataset, Handsontable, metadata) {\n        const colTypeIcons = {\n            date: 'fa fa-clock-o'\n        };\n        function HtmlCellRender(instance, TD, row, col, prop, value, cellProperties) {\n            var escaped = dw.utils.purifyHtml(Handsontable.helper.stringify(value));\n            TD.innerHTML = escaped; // this is faster than innerHTML. See: https://github.com/warpech/jquery-handsontable/wiki/JavaScript-&-DOM-performance-tips\n        }\n        return function(instance, td, row, col, prop, value, cellProperties) {\n            if (dataset.numColumns() <= col) return;\n            const column = dataset.column(col);\n            const {searchResults, currentResult, activeColumn} = app.get();\n            row = instance.toPhysicalRow(row);\n            if (row > 0) {\n                var formatter = chart.columnFormatter(column);\n                value = formatter(column.val(row - 1), true);\n            }\n            if (parseInt(value) < 0) { // if row contains negative number\n                td.classList.add('negative');\n            }\n            td.classList.add(column.type()+'Type');\n\n            if (column.type() == 'text' && value.length > 70) {\n                value = value.substr(0,60)+'…';\n            }\n\n            if (row === 0) {\n                td.classList.add('firstRow');\n                if (colTypeIcons[column.type()]) {\n                    value = '<i class=\"'+colTypeIcons[column.type()]+'\"></i> ' + value;\n                }\n                td.dataset.column = col;\n            } else {\n                td.classList.add(row % 2 ? 'oddRow' : 'evenRow');\n            }\n            // if (metadata.columnFormat.get(column.name()).ignore) {\n            //     td.classList.add('ignored');\n            // }\n            // if(selectedColumns.indexOf(col) > -1) {\n            //     td.classList.add('area'); //add blue area background if this cell is in selected column\n            // }\n            if (activeColumn && activeColumn == column) {\n                td.classList.add('area');\n            }\n            searchResults.forEach(res => {\n                if (res.row == row && res.col == col) {\n                    td.classList.add('htSearchResult');\n                }\n            });\n            if (currentResult && currentResult.row == row && currentResult.col == col) {\n                td.classList.add('htCurrentSearchResult');\n            }\n            if (row > 0 && !column.type(true).isValid(column.val(row-1))) {\n                td.classList.add('parsingError');\n            }\n            if (cellProperties.readOnly) td.classList.add('readOnly');\n\n            if (chart.dataCellChanged(col, row)) {\n                td.classList.add('changed');\n            }\n            HtmlCellRender(instance, td, row, col, prop, value, cellProperties);\n            // Reflect.apply(HtmlCellRender, this, arguments);\n        };\n    }\n\n</script>\n\n<style>:global(#data-preview) {\n  width: 770px;\n  /*height: 400px;*/\n  overflow: auto;\n}\n:global(#data-preview) tr td,\n:global(#data-preview) tr th {\n  font-family: 'Roboto Mono', fixed;\n  font-size: 12px;\n}\n:global(#data-preview) colgroup col {\n  max-width: 500px!important;\n}\n:global(#data-preview) tr td {\n  padding: 3px 6px;\n}\n:global(#data-preview) tr td.textType {\n  color: #000000;\n}\n:global(#data-preview) tr td.dateType {\n  color: #39A832;\n  text-align: center;\n}\n:global(#data-preview) tr td.numberType {\n  color: #297EA8;\n  text-align: right;\n}\n:global(#data-preview) tr td.parsingError {\n  background: #fee;\n  color: #c00;\n}\n:global(#data-preview) tr td.readOnly.firstRow {\n  background: #EAEAEA;\n  border-right-color: #aaa;\n  color: #777;\n}\n:global(#data-preview) tr td.changed {\n  position: relative;\n}\n:global(#data-preview) tr td.changed:after {\n  content: ' ';\n  width: 0;\n  height: 0;\n  border-top: 7px solid orange;\n  border-right: 7px solid transparent;\n  display: block;\n  position: absolute;\n  left: 0;\n  top: 0;\n}\n:global(#data-preview) tr td.htSearchResult {\n  /*background: #ffd;*/\n  background: #fff8ef;\n  color: #8d6833!important;\n}\n:global(#data-preview) tr td.htCurrentSearchResult {\n  color: #583707!important;\n  background: #fcedd9;\n  /*background: #fffe83;*/\n}\n:global(#data-preview) thead th {\n  cursor: pointer;\n  background: #eee;\n  border-right: 1px solid #b3b3b3;\n}\n:global(#data-preview) thead th.selected {\n  background: #18a1cd;\n  color: white;\n  font-weight: bold;\n}\n:global(#data-preview) thead th:hover {\n  background: #ddd;\n}\n:global(#data-preview) thead th.selected:hover {\n  background: #18a1cd;\n}\n:global(#data-preview) thead tr th + th div:after {\n  content: \" \" url(/static/css/chart-editor/selection-off.png);\n  position: absolute;\n  top: 3px;\n  right: 5px;\n}\n:global(#data-preview) thead th + th:hover div:after {\n  content: \" \" url(/static/css/chart-editor/selection-hover.png);\n}\n:global(#data-preview) thead th + th.selected div:after {\n  opacity: 1;\n  content: \" \" url(/static/css/chart-editor/selection.png);\n}\n:global(#data-preview) tbody tr:first-child td {\n  background: #f3f3f3;\n  font-weight: bold;\n  border-bottom: 1px solid #999;\n}\n:global(#data-preview) .htCommentCell:after {\n  border-left: 8px solid transparent;\n  border-top: 8px solid orange;\n}\n:global(#data-preview) .handsontable td.area-1::before,\n:global(#data-preview) .handsontable td.area-2::before,\n:global(#data-preview) .handsontable td.area-3::before,\n:global(#data-preview) .handsontable td.area-4::before,\n:global(#data-preview) .handsontable td.area-5::before,\n:global(#data-preview) .handsontable td.area-6::before,\n:global(#data-preview) .handsontable td.area-7::before,\n:global(#data-preview) .handsontable td.area::before {\n  background: #18a1cd;\n}\n</style>\n",
    "<div>\n    <h3 class=\"first\">Edit computed column \"{{column.name()}}\"</h3>\n    <p>{{\"Die Werte in den Spalten können nach einer Formel berechnet werden, wie in Excel.\"}}</p>\n\n    <label>{{\"computed columns / modal / name\"}}</label>\n    <input type=\"text\" bind:value=\"name\" />\n\n    <label>{{\"Formel (JavaScript)\"}}</label>\n    <textarea ref:code class=\"code\"></textarea>\n\n    <p style=\"margin-top: 1em\">{{\"Verfügbare Spalten\"}}:</p>\n\n    <ul class=\"col-select\">\n        {{#each metaColumns as column}}\n        <li on:click=\"insert(column)\">{{column.key}}</li>\n        {{/each}}\n    </ul>\n</div>\n\n<style>label {\n  font-weight: bold;\n}\n.col-select {\n  padding: 0;\n  margin: 0;\n}\n.col-select li {\n  font-family: 'Roboto mono';\n  display: inline-block;\n  /*color: #1d81a2;*/\n  cursor: pointer;\n  margin: 0px 1ex 1ex 0;\n  font-size: 12px;\n  line-height: 15px;\n  background: #1d81a2;\n  color: white;\n  padding: 2px 5px;\n  border-radius: 2px;\n}\n.col-select li:hover {\n  background: #18a1cd;\n}\n:global(.CodeMirror) {\n  border-radius: 1px;\n  width: 95%;\n  height: 130px;\n  padding: 0px 3px;\n  border: 1px solid #cccccc;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  transition: border linear 0.2s, box-shadow linear 0.2s;\n  background-color: #ffffff;\n}\n:global(.CodeMirror) .CodeMirror-nonmatchingbracket {\n  color: inherit;\n  background: #fcc;\n}\n:global(.CodeMirror) .CodeMirror-matchingbracket {\n  color: inherit;\n  background: #cfc;\n}\n:global(.CodeMirror) .CodeMirror-placeholder,\n:global(.CodeMirror) .cm-s-default .cm-comment {\n  color: #9C938B;\n}\n:global(.CodeMirror) .cm-variable-2 {\n  color: #18a1cd!important;\n}\n:global(.CodeMirror).CodeMirror-focused {\n  border-color: rgba(82, 168, 236, 0.8);\n  outline: 0;\n  outline: thin dotted \\9;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);\n  -moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);\n}\n</style>\n\n<script>\n    /* global  */\n    import CodeMirror from 'cm/lib/codemirror';\n    import 'cm/mode/javascript/javascript';\n    import 'cm/addon/mode/simple';\n\n    export default {\n        methods: {\n            insert (column) {\n                const {cm} = this.get();\n                cm.replaceSelection(column.key);\n                cm.focus();\n            }\n        },\n        computed: {\n            metaColumns (columns) {\n                if (!columns) return [];\n                return columns.map(col => {\n                    return {\n                        key: column_name_to_var(col.name()),\n                        title: col.title()\n                    };\n                });\n            }\n        },\n        oncreate() {\n            const cm = CodeMirror.fromTextArea(this.refs.code, {\n                value: this.get('formula'),\n                mode: 'simple'\n            });\n\n            window.CodeMirror = CodeMirror;\n\n            this.set({cm});\n\n            this.observe('formula', (formula) => {\n                if (formula != cm.getValue()) cm.setValue(formula);\n            });\n\n            cm.on('change', (cm) => {\n                this.set({formula: cm.getValue()});\n            });\n\n            cm.on('focus', () => this.fire('focus'));\n\n            this.observe('metaColumns', (cols) => {\n                var columns_regex = new RegExp(`(?:${cols.map(c=>c.key).join('|')})`);\n                CodeMirror.defineSimpleMode(\"simplemode\", {\n                    // The start state contains the rules that are intially used\n                    start: [\n                        // The regex matches the token, the token property contains the type\n                        {regex: /\"(?:[^\\\\]|\\\\.)*?(?:\"|$)/, token: \"string\"},\n                        // You can match multiple tokens at once. Note that the captured\n                        // groups must span the whole string in this case\n                        {regex: /(function)(\\s+)([a-z$][\\w$]*)/,\n                         token: [\"keyword\", null, \"keyword\"]},\n                        // Rules are matched in the order in which they appear, so there is\n                        // no ambiguity between this one and the one above\n                        {regex: /(?:function|var|return|if|for|while|else|do|this)\\b/,\n                         token: \"keyword\"},\n                        {regex: /true|false|null|undefined/, token: \"atom\"},\n                        {regex: /0x[a-f\\d]+|[-+]?(?:\\.\\d+|\\d+\\.?\\d*)(?:e[-+]?\\d+)?/i,\n                         token: \"number\"},\n                        {regex: /\\/\\/.*/, token: \"comment\"},\n                        {regex: /\\/(?:[^\\\\]|\\\\.)*?\\//, token: \"variable-3\"},\n                        // A next property will cause the mode to move to a different state\n                        {regex: /\\/\\*/, token: \"comment\", next: \"comment\"},\n                        {regex: /[-+\\/*=<>!]+/, token: \"operator\"},\n                        // indent and dedent properties guide autoindentation\n                        {regex: /[\\{\\[\\(]/, indent: true},\n                        {regex: /[\\}\\]\\)]/, dedent: true},\n                        {regex: columns_regex, token: 'variable-2'},\n                        {regex: /[a-z$][\\w$]*/, token: \"variable\"},\n                        // You can embed other modes with the mode property. This rule\n                        // causes all code between << and >> to be highlighted with the XML\n                        // mode.\n                        {regex: /<</, token: \"meta\", mode: {spec: \"xml\", end: />>/}}\n                    ],\n                    // The multi-line comment state.\n                    comment: [\n                        {regex: /.*?\\*\\//, token: \"comment\", next: \"start\"},\n                        {regex: /.*/, token: \"comment\"}\n                    ],\n                    // The meta property contains global information about the mode. It\n                    // can contain properties like lineComment, which are supported by\n                    // all modes, and also directives like dontIndentStates, which are\n                    // specific to simple modes.\n                    meta: {\n                        dontIndentStates: [\"comment\"],\n                        lineComment: \"//\"\n                    }\n                });\n\n                cm.setOption('mode', 'simplemode');\n            });\n        }\n    }\n\n    function column_name_to_var(name) {\n        // if you change this, change dw.chart.js as well\n        return name.toString().toLowerCase()\n            .replace(/\\s+/g, '_')           // Replace spaces with _\n            .replace(/[^\\w-]+/g, '')       // Remove all non-word chars\n            .replace(/-/g, '_')             // Replace - with single _\n            .replace(/__+/g, '_')         // Replace multiple _ with single _\n            .replace(/^_+/, '')             // Trim _ from start of text\n            .replace(/_+$/, '')             // Trim _ from end of text\n            .replace(/^(\\d)/, '_$1')        // If first char is a number, prefix with _\n            .replace(/(abstract|arguments|await|boolean|break|byte|case|catch|char|class|const|continue|debugger|default|delete|do|double|else|enum|eval|export|extends|false|final|finally|float|for|function|goto|if|implements|import|in|instanceof|int|interface|let|long|native|new|null|package|private|protected|public|return|short|static|super|switch|synchronized|this|throw|throws|transient|true|try|typeof|var|void|volatile|while|window|with|yield)/, '$1_'); // reserved keywords\n    }\n\n</script>\n",
    "<div class=\"control-group vis-option-group vis-option-type-checkbox\">\n    <label class=\"checkbox {{disabled? 'disabled' :''}}\">\n        <input type=\"checkbox\" disabled=\"{{disabled}}\" bind:checked=\"value\" />&nbsp;{{ label }}\n    </label>\n</div>\n\n<style>label.checkbox {\n  text-align: left;\n  width: 100%;\n  position: relative;\n  left: 0;\n}\nlabel.checkbox.disabled {\n  color: #999;\n}\nlabel.checkbox.disabled input {\n  opacity: 0.5;\n}\n</style>\n\n<script>\n    export default {\n        data() {\n            return {\n                disabled: false\n            }\n        }\n    }\n</script>\n"
  ],
  "names": [],
  "mappings": "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"
}