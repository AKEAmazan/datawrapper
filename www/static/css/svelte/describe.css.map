{
  "version": 3,
  "file": "describe.css",
  "sources": [
    "../../../../src/describe/Handsontable.html"
  ],
  "sourcesContent": [
    "\n<div id=\"data-preview\" ref:hot />\n\n<script>\n    // import '/static/plugins/simple-maps/vendor/hot/handsontable.full.js?foo';\n    import HOT from 'Handsontable';\n    import _range from 'underscore-es/range';\n\n    export default {\n        methods: {\n            update() {\n                const {data, transpose, firstRowIsHeader, skipRows, hot} = this.get();\n\n                if (!data) return;\n\n                // get chart\n                const chart = this.store.get('dw_chart');\n\n                // pass dataset through chart to apply changes and computed columns\n                const ds = chart.dataset(dw.datasource.delimited({\n                    csv: data,\n                    transpose,\n                    firstRowIsHeader,\n                    skipRows\n                }).parse()).dataset();\n\n                ds.resortColumns([0,1,5,2,4,3]);\n\n                // construct HoT data array\n                const hot_data = [[]];\n                ds.eachColumn(c => hot_data[0].push(c.title()));\n                ds.eachRow(r => {\n                    const row = [];\n                    ds.eachColumn(col => row.push(col.val(r)));\n                    hot_data.push(row);\n                });\n\n                // pass data to hot\n                hot.loadData(hot_data);\n\n                hot.updateSettings({ cells: (row, col, prop) => {\n                    const {readonly} = this.get();\n                    return {\n                        readOnly: readonly || ds.column(col).isComputed && row === 0,\n                        renderer: getCellRenderer(this, ds, HOT, {}),\n                        // rowHeaders: _range(hot_data.length).map(r => 'R'+r)\n                    };\n                }});\n                hot.render();\n            }\n        },\n        oncreate() {\n            const {table} = this.get();\n\n            const hot = new HOT(this.refs.hot, {\n                data: [],\n                rowHeaders: (i) => {\n                    const ti = hot.getPlugin('ColumnSorting').translateRow(i);\n                    return ti+1;\n                },\n                colHeaders: true,\n                fixedRowsTop: 1,\n                filters: true,\n                dropdownMenu: true,\n                startRows: 60,\n                startCols: 8,\n                fillHandle: false,\n                stretchH: 'all',\n                manualColumnMove: true,\n                // comments: true,\n                // contextMenu: true,\n\n                // sorting\n                columnSorting: true,\n                sortIndicator: true,\n                sortFunction: function(sortOrder, columnMeta) {\n                    return function(a, b) {\n                        var plugin = hot.getPlugin('columnSorting');\n                        var sortFunction;\n\n                        if (a[0] === 0) return -1;\n\n                        switch (columnMeta.type) {\n                            case 'date':\n                                sortFunction = plugin.dateSort;\n                                break;\n                            case 'numeric':\n                                sortFunction = plugin.numericSort;\n                                break;\n                            default:\n                                sortFunction = plugin.defaultSort;\n                        }\n\n                        return sortFunction(sortOrder, columnMeta)(a, b);\n                    };\n                },\n\n                // search\n                search: 'search'\n            });\n\n            this.set({hot});\n\n            HOT.hooks.add('afterSetDataAtCell', (a,b,c,d) => {\n                console.log('afterSetDataAtCell', a,b,c,d);\n                // this.set({table});\n            });\n\n            this.observe('data', (csvdata) => {\n                this.update();\n            });\n\n            this.observe('search', (query) => {\n                console.log('search', query);\n                const search_results = hot.search.query(query);\n                this.set({search_results});\n                hot.render();\n            });\n\n        },\n        data() {\n            return {\n                data: '',\n                readonly: false,\n                skipRows: 0,\n                firstRowIsHeader: true,\n                transpose: false,\n                search: '',\n                search_results: []\n            };\n        }\n    };\n\n    function getCellRenderer(app, dataset, Handsontable, metadata) {\n        const colTypeIcons = {\n            date: 'fa fa-clock-o'\n        };\n        function HtmlCellRender(instance, TD, row, col, prop, value, cellProperties) {\n            var escaped = dw.utils.purifyHtml(Handsontable.helper.stringify(value));\n            TD.innerHTML = escaped; //this is faster than innerHTML. See: https://github.com/warpech/jquery-handsontable/wiki/JavaScript-&-DOM-performance-tips\n        }\n        return function(instance, td, row, col, prop, value, cellProperties) {\n            const column = dataset.column(col);\n            const {search_results} = app.get();\n            if (row > 0) {\n                var formatter = chart.columnFormatter(column);\n                value = formatter(column.val(row - 1), true);\n            }\n            if (parseInt(value, 10) < 0) { //if row contains negative number\n                td.classList.add('negative');\n            }\n            td.classList.add(column.type()+'Type');\n\n            if (row === 0) {\n                td.classList.add('firstRow');\n                if (colTypeIcons[column.type()]) {\n                    value = '<i class=\"'+colTypeIcons[column.type()]+'\"></i> ' + value;\n                }\n            } else {\n                td.classList.add(row % 2 ? 'oddRow' : 'evenRow');\n            }\n            // if (metadata.columnFormat.get(column.name()).ignore) {\n            //     td.classList.add('ignored');\n            // }\n            // if(selectedColumns.indexOf(col) > -1) {\n            //     td.classList.add('area'); //add blue area background if this cell is in selected column\n            // }\n            search_results.forEach(res => {\n                if (res.row == row && res.col == col) td.classList.add('htSearchResult');\n            });\n            if (row > 0 && !column.type(true).isValid(column.val(row-1))) {\n                td.classList.add('parsingError');\n            }\n            if (cellProperties.readOnly) td.classList.add('readOnly');\n\n            if (chart.dataCellChanged(col, row)) {\n                td.classList.add('changed');\n            }\n            HtmlCellRender.apply(this, arguments);\n        };\n    }\n\n</script>\n\n<style>:global(#data-preview) {\n  width: 770px;\n  height: 500px;\n  max-height: 500px;\n  overflow: auto;\n}\n:global(#data-preview) tr td,\n:global(#data-preview) tr th {\n  font-family: 'Roboto Mono', fixed;\n  font-size: 12px;\n}\n:global(#data-preview) tr td {\n  padding: 3px 6px;\n}\n:global(#data-preview) tr td.textType {\n  color: #000000;\n}\n:global(#data-preview) tr td.dateType {\n  color: #39A832;\n  text-align: center;\n}\n:global(#data-preview) tr td.numberType {\n  color: #297EA8;\n  text-align: right;\n}\n:global(#data-preview) tr td.parsingError {\n  background: #fee;\n  color: #c00;\n}\n:global(#data-preview) tr td.readOnly.firstRow {\n  background: #EAEAEA;\n  border-right-color: #aaa;\n  color: #777;\n}\n:global(#data-preview) tr td.changed {\n  position: relative;\n}\n:global(#data-preview) tr td.changed:after {\n  content: ' ';\n  width: 0;\n  height: 0;\n  border-top: 7px solid orange;\n  border-right: 7px solid transparent;\n  display: block;\n  position: absolute;\n  left: 0;\n  top: 0;\n}\n:global(#data-preview) tr td.htSearchResult {\n  background: yellow;\n}\n:global(#data-preview) tbody tr:first-child td {\n  background: #f3f3f3;\n  font-weight: bold;\n  border-bottom: 1px solid #999;\n}\n:global(#data-preview) .htCommentCell:after {\n  border-left: 8px solid transparent;\n  border-top: 8px solid orange;\n}\n</style>\n"
  ],
  "names": [],
  "mappings": "AAwLe,aAAa,AAAE,CAAC,AAC7B,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,KAAK,CACjB,QAAQ,CAAE,IAAI,AAChB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,CACpB,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,AAAC,CAAC,AAC5B,WAAW,CAAE,aAAa,CAAC,CAAC,KAAK,CACjC,SAAS,CAAE,IAAI,AACjB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,AAAC,CAAC,AAC5B,OAAO,CAAE,GAAG,CAAC,GAAG,AAClB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,SAAS,AAAC,CAAC,AACrC,KAAK,CAAE,OAAO,AAChB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,SAAS,AAAC,CAAC,AACrC,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,MAAM,AACpB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,WAAW,AAAC,CAAC,AACvC,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,KAAK,AACnB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,aAAa,AAAC,CAAC,AACzC,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,IAAI,AACb,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,SAAS,SAAS,AAAC,CAAC,AAC9C,UAAU,CAAE,OAAO,CACnB,kBAAkB,CAAE,IAAI,CACxB,KAAK,CAAE,IAAI,AACb,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,AAAC,CAAC,AACpC,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,MAAM,AAAC,CAAC,AAC1C,OAAO,CAAE,GAAG,CACZ,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,MAAM,CAC5B,YAAY,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CACnC,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,AACR,CAAC,AACO,aAAa,AAAC,CAAC,EAAE,CAAC,EAAE,eAAe,AAAC,CAAC,AAC3C,UAAU,CAAE,MAAM,AACpB,CAAC,AACO,aAAa,AAAC,CAAC,KAAK,CAAC,EAAE,YAAY,CAAC,EAAE,AAAC,CAAC,AAC9C,UAAU,CAAE,OAAO,CACnB,WAAW,CAAE,IAAI,CACjB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC/B,CAAC,AACO,aAAa,AAAC,CAAC,cAAc,MAAM,AAAC,CAAC,AAC3C,WAAW,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CAClC,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,MAAM,AAC9B,CAAC"
}