{
  "version": 3,
  "file": "controls.css",
  "sources": [
    "../../../../src/controls/ColorPicker.html",
    "../../../../src/controls/Checkbox.html",
    "../../../../src/controls/CustomFormat.html",
    "../../../../src/controls/Number.html",
    "../../../../src/controls/Radio.html",
    "../../../../src/controls/Dropdown.html",
    "../../../../src/controls/Switch.html",
    "../../../../src/controls/SelectAxisColumn.html"
  ],
  "sourcesContent": [
    "<:Window on:click='set({visible:false})'/>\n\n<div class=\"color-picker-cont\" on:click='event.stopPropagation()'>\n    <div on:click=\"set({visible:true})\">\n        <slot>\n            <div class=\"base-color-picker color-picker\">\n                <div style=\"background: {color} none repeat scroll 0% 0%;\" class=\"the-color\"></div>\n                <span class=\"caret\"></span>\n            </div>\n        </slot>\n    </div>\n    {#if visible && color}\n    <div class=\"color-selector\">\n        <div class=\"palette\">\n            {#each palette as c}\n            <div class=\"color\" on:click=\"set({color:c})\" on:dblclick=\"set({color:c, visible:false})\" data-color=\"{c}\" style=\"background: {c}\"></div>\n            {/each}\n        </div>\n\n        <div class=\"color-axis lightness\">\n            {#each gradient_l as c}\n            <div class=\"color {c == nearest_l?'selected':''}\" on:click=\"set({color:c})\" data-color=\"{c}\" style=\"background: {c}\"></div>\n            {/each}\n        </div>\n        <div class=\"color-axis saturation\">\n            {#each gradient_c as c}\n            <div class=\"color {c == nearest_c?'selected':''}\" on:click=\"set({color:c})\" data-color=\"{c}\" style=\"background: {c}\"></div>\n            {/each}\n        </div>\n        <div class=\"color-axis hue\">\n            {#each gradient_h as c}\n            <div class=\"color {c == nearest_h?'selected':''}\" on:click=\"set({color:c})\" data-color=\"{c}\" style=\"background: {c}\"></div>\n            {/each}\n        </div>\n\n        <div class=\"footer\">\n            <input type=\"text\" style=\"background: {color}; border-color: {borderColor}; color: {textColor}\" bind:value=\"color\" class=\"hex\">\n            <button class=\"btn btn-small ok\" on:click=\"set({visible:false})\"><i class=\"icon-ok\"></i></button>\n            <div class=\"color selected\" style=\"background: {color}\"></div>\n        </div>\n    </div>\n    {/if}\n</div>\n<script>\n\n    import chroma from 'chroma';\n\n    let ref;\n\n    export default {\n        computed: {\n            palette({$theme}) {\n                return $theme.colors.palette;\n            },\n            gradient_l ({ color }) {\n                const lch = chroma(color).lch();\n                const sample = spread(70, 55, 7, 6).map((l) => chroma.lch(l, lch[1], lch[2]).hex());\n                return chroma.scale(['#000000'].concat(sample).concat('#ffffff'))\n                    .mode('lch')\n                    .gamma(0.8)\n                    .padding(0.1)\n                    .colors(14);\n            },\n            gradient_c ({ color, palette }) {\n                let high = chroma(color).set('lch.c', 120);\n                if (isNaN(high.get('lch.h'))) {\n                    high = chroma.lch(high.get('lch.l'), 50, chroma(palette[0]).get('lch.h'));\n                }\n                const low = chroma(color).set('lch.c', 3);\n                return chroma.scale([low, high])\n                    .mode('lch')\n                    .gamma(1.2)\n                    .colors(14);\n            },\n            gradient_h ({ color }) {\n                const lch = chroma(color).lch();\n                const sample = spread(lch[2], 75, 7, 6)\n                    .map((h) => chroma.lch(lch[0], lch[1], h).hex());\n                return chroma.scale(sample)\n                    .mode('lch')\n                    .colors(14);\n            },\n            nearest_l ({ color, gradient_l }) { return findNearest(gradient_l, color); },\n            nearest_c ({ color, gradient_c }) { return findNearest(gradient_c, color); },\n            nearest_h ({ color, gradient_h }) { return findNearest(gradient_h, color); },\n            textColor ({ color }) {\n                return chroma(color).get('lab.l') > 60 ? 'black' : 'white';\n            },\n            borderColor ({ color }) {\n                return chroma(color).darker().hex();\n            }\n        },\n        data() {\n            return {\n                palette: [],\n                color: '#63c0de',\n                visible: false\n            };\n        },\n        oncreate() {\n            const me = this;\n            me.observe('color', (color, old_color) => {\n                const {visible} = me.get();\n                if (visible && color != old_color) me.fire('change', color);\n            });\n            ref = this;\n            window.document.body.addEventListener('click', this.bodyClick);\n        },\n        ondestroy() {\n            window.document.body.removeEventListener('click', this.bodyClick);\n        },\n        methods: {\n            bodyClick (event) {\n                if (!ref.get) return;\n                const {visible} = ref.get();\n                let el = event.target;\n                if (visible) {\n                    while (!el.classList.contains('color-picker-cont') &&\n                        el.nodeName.toLowerCase() != 'body') {\n                        el = el.parentNode;\n                    }\n                    ref.set({visible: el != window.document.body});\n                }\n            }\n        }\n    };\n\n    function findNearest(colors, color) {\n        let nearest_i = -1;\n        let nearest_dist = 999999;\n        if (colors[0] == colors[1]) return '-';\n        colors.forEach((c,i) => {\n            const dist = chroma.distance(c, color, 'lab');\n            if (dist < nearest_dist) {\n                nearest_dist = dist;\n                nearest_i = i;\n            }\n        });\n        return colors[nearest_i];\n    }\n\n    function spread(center, width, num, num2, exp) {\n        var r = [center], s = width / num, a = 0;\n        num2 = _.isUndefined(num2) ? num : num2;\n        exp = exp || 1;\n        while (num-- > 0) {\n            a += s;\n            r.unshift(center - a);\n            if (num2-- > 0) r.push(center + a);\n        }\n        return r;\n    }\n\n</script>\n\n<style>\n.color-picker-cont { display: inline-block; }\ninput.hex { margin-bottom:0!important; }\n\n.color-picker {\n    width: 2em;\n    height: 24px;\n    border: 2px solid #fff;\n        border-right-color: rgb(255, 255, 255);\n        border-right-style: solid;\n        border-right-width: 2px;\n    border-radius: 4px;\n    border-right: 20px solid #fff;\n    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.3);\n    position: relative;\n    display: inline-block;\n    margin-right: 10px;\n    vertical-align: middle;\n}\n\n.the-color {\n    width: 100%;\n    height: 100%;\n    border-radius: 3px;\n}\n\n.base-color-picker .caret {\n    position: absolute;\n    top: 10px;\n    right: -14px;\n    width: 0px;\n    cursor: pointer;\n    text-align: center;\n}\n\n</style>\n",
    "<div class=\"control-group vis-option-group vis-option-type-checkbox\">\n    <label class=\"checkbox {disabled? 'disabled' :''}\">\n        <input type=\"checkbox\" disabled=\"{disabled}\" bind:checked=\"value\" />&nbsp;{ label }\n    </label>\n</div>\n\n<style>label.checkbox {\n  text-align: left;\n  width: 100%;\n  position: relative;\n  left: 0;\n}\nlabel.checkbox.disabled {\n  color: #999;\n}\nlabel.checkbox.disabled input {\n  opacity: 0.5;\n}\n</style>\n\n<script>\n    export default {\n        data() {\n            return {\n                disabled: false\n            }\n        }\n    }\n</script>\n",
    "\n<div class=\"control-group vis-option-custom-format\">\n    <label class=\"control-label\">\n        {@html label }\n    </label>\n\n    <div class=\"controls form-inline\">\n        {#if selected == 'custom'}\n        <div class=\"small\">\n            For help on custom formats, check the {@html customFormatHelp}.\n        </div>\n        {/if}\n\n        <select bind:value=\"selected\">\n        {#each options as opt}\n            <option value=\"{opt.f}\">{opt.l}</option>\n        {/each}\n            <option value=\"custom\">(custom)</option>\n        </select>\n        {#if selected == 'custom'}\n        <input bind:value=\"custom\" type=\"text\" />\n        {/if}\n    </div>\n</div>\n\n<script>\n    export default {\n        computed: {\n            customFormatHelp ({ axisCol }) {\n                if (!axisCol) return;\n                if (axisCol.type() == 'date') return '<a href=\"http://momentjs.com/docs/#/displaying/format/\" target=\"_blank\">moment.js documentation</a>';\n                if (axisCol.type() == 'number') return '<a href=\"http://numeraljs.com/#format\" target=\"_blank\">numeral.js documentation</a>';\n                return '';\n            },\n            axisCol ({ $vis, $dataset, axis }) {\n                if (!$vis || !axis) return null;\n                const colids = $vis.axes()[axis];\n                return $dataset.column(typeof colids == 'object' ? colids[0] : colids);\n            },\n            options ({ axisCol }) {\n                if (!axisCol) return [];\n                if (axisCol.type() == 'number') {\n                    // todo: translate labels\n                    return [\n                        { l: '1,000[.00]', f: '0,0.[00]' },\n                        { l: '0', f: '0' },\n                        { l: '0.0', f: '0.0' },\n                        { l: '0.00', f: '0.00' },\n                        { l: '0.000', f: '0.000' },\n                        { l: '0.[0]', f: '0.[0]' },\n                        { l: '0.[00]', f: '0.[00]' },\n                        { l: '0%', f: '0%' },\n                        { l: '0.0%', f: '0.0%' },\n                        { l: '0.00%', f: '0.00%' },\n                        { l: '0.[0]%', f: '0.[0]%' },\n                        { l: '0.[00]%', f: '0.[00]%' },\n                        { l: '10,000', f: '0,0' },\n                        { l: '1st', f: '0o' },\n                        { l: '123k', f: '0a' },\n                        { l: '123.4k', f: '0.[0]a' },\n                        { l: '123.45k', f: '0.[00]a' },\n                    ];\n                }\n                if (axisCol.type() == 'date') {\n                    // todo translate\n                    return [\n                        { l: '2015, 2016', f: 'YYYY' },\n                        { l: '2015 Q1, 2015 Q2', f: 'YYYY [Q]Q' },\n                        { l: '2015, Q2, Q3', f: 'YYYY|\\\\QQ' },\n                        { l: '2015, Feb, Mar', f: 'YYYY|MMM' },\n                        { l: '’15, ’16', f: '’YY' },\n                        { l: 'April, May', f: 'MMMM' },\n                        { l: 'Apr, May', f: 'MMM' },\n                        { l: 'Apr ’15, May ’15', f: 'MMM ’YY' },\n                        { l: 'April, 2, 3', f: 'MMM|DD' },\n                    ];\n                }\n            }\n        },\n        data() {\n            return {\n                axis: false,\n                value: '',\n                custom: '',\n                selected: null\n            }\n        },\n        oncreate() {\n            // watch select input\n            this.observe('selected', (sel, old) => {\n                if (sel == old) return;\n                const {custom} = this.get();\n                this.set({value: sel != 'custom' ? sel : custom+' '});\n            });\n            // watch external value changes\n            this.observe('value', (val, old) => {\n                if (val == old) return;\n                const {options} = this.get();\n                let found = false;\n                for (let o of options) {\n                    if (o.f == val) return this.set({selected: val});\n                }\n                this.set({selected: 'custom', custom: val});\n            });\n            this.observe('custom', (val, old) => {\n                if (val == old) return;\n                const {selected} = this.get();\n                if (selected == 'custom') this.set({value:val});\n            });\n        }\n    };\n</script>\n\n<style>\n.control-label {\n    width: 100px!important;\n}\nselect, input {\n    width: 110px!important;\n    vertical-align: baseline;\n}\ninput {\n    width: 100px!important;\n}\n.small {\n    font-size: 12px;\n    line-height: 14px;\n    font-style: italic;\n    color: #999;\n    max-width: 210px;\n    margin-bottom: 6px;\n}\n</style>\n",
    "<div class=\"control-group vis-option-group vis-option-type-number\">\n    <label style=\"width:{width}\" class=\"control-label\">{@html label }</label>\n    <div class=\"controls\">\n        <input type=\"range\" min=\"{min}\" max=\"{max}\" step=\"{step}\" bind:value />&nbsp;&nbsp;<input type=\"number\" min=\"{min}\" max=\"{max}\" step=\"{step}\" bind:value/> {#if unit}<span class=\"unit\">{unit}</span>{/if}\n    </div>\n</div>\n\n<style>\n    input[type=\"range\"] {\n        width: 130px;\n    }\n    input[type=\"number\"] {\n        width: 50px;\n        text-align: center;\n        border: 0;\n        background: #fcfcfc;\n    }\n    .unit {\n        font-weight: 300;\n        color: #999;\n    }\n</style>\n\n<script>\n    export default {\n        data () {\n            return {\n                unit: '',\n                step: 1,\n                min: 0,\n                max: 100,\n                width: '100px'\n            };\n        }\n    };\n</script>\n",
    "<div class=\"control-group vis-option-group vis-option-type-radio\">\n    <label style=\"width:{width}\" class=\"control-label\">\n        {@html label }\n    </label>\n\n    <div class=\"controls form-inline\">\n        {#each options as opt}\n        <label class=\"radio {disabled? 'disabled' :''}\">\n            <input type=\"radio\" value=\"{ opt.value }\" bind:group=\"value\" disabled=\"{disabled}\"/>&nbsp;{ opt.label }\n        </label>\n        {/each}\n    </div>\n</div>\n\n<style>label.radio {\n  padding-top: 0!important;\n  padding-right: 1ex;\n  vertical-align: text-top;\n}\nlabel.radio.disabled {\n  color: #999;\n}\nlabel.radio.disabled input {\n  opacity: 0.5;\n}\ninput {\n  float: none;\n  vertical-align: text-bottom;\n}\n</style>\n\n<script>\n    export default {\n        data() {\n            return {\n                disabled: false,\n                width: 'auto'\n            }\n        }\n    }\n</script>\n",
    "<div class=\"control-group vis-option-type-select\">\n    <label class=\"control-label\">\n        {@html label }\n    </label>\n\n    <div class=\"controls form-inline {disabled? 'disabled' :''}\">\n        <div class=\"btn-group\">\n            <a class=\"btn dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\">\n                {@html currentLabel}\n                <span class=\"caret\"></span>\n            </a>\n            <ul class=\"dropdown-menu\">\n                {#if options.length}\n                    {#each options as opt}\n                        <li class=\"{value==opt.value?'selected':''}\">\n                            <a on:click=\"select(event, opt)\" href=\"#/{opt.value}\">{@html opt.label}</a>\n                        </li>\n                    {/each}\n                {/if}\n            </ul>\n        </div>\n    </div>\n</div>\n\n<style type=\"text/css\">\n    li.selected {\n        background: #18a1cd33;\n    }\n    .dropdown-toggle {\n        background: white;\n    }\n    span.caret {\n        margin-left: 5px;\n    }\n</style>\n\n<script type=\"text/javascript\">\nexport default {\n    computed: {\n        currentLabel({ value, options }) {\n            for (let i=0; i<options.length; i++) {\n                if (options[i].value == value) return options[i].label;\n            }\n            return '(select an item)';\n        }\n    },\n    methods: {\n        select(event, opt) {\n            console.log('dropdown.select', event, opt);\n            event.preventDefault();\n            this.set({ value: opt.value });\n            this.fire('change', opt.value);\n        }\n    },\n    data () {\n        return {\n            disabled: false,\n            width: 'auto',\n            options: [],\n            optgroups: [],\n        };\n    }\n};\n</script>\n\n",
    "<!--\n\nSimple usage:\n\n<Switch label=\"This is a toggle\" bind:value=\"toggleValue\">\n    <p>This content will show up if the switch is turned on</p>\n</Switch>\n\nYou can disable the switch using the `disabled` property:\n\n<Switch\n    label=\"This is a toggle\"\n    bind:value=\"toggleValue\"\n    disabled=\"checkDisabled()\">\n</Switch>\n\nSometimes it's useful to tell the user WHY a switch is disabled.\nThat's what the `disabled_msg` attribute is for:\n\n<Switch\n    label=\"This is a toggle\"\n    bind:value=\"toggleValue\"\n    disabled=\"checkDisabled()\"\n    disabled_msg=\"This is disabled because we say so\">\n</Switch>\n\nAlso, when we are disabling a switch, sometimes we still internally\ndecide whether or not to interpret the disabled state as toggled\non or off. It might make sense to indicate this to the user by\nforcing the switch state to \"on\" or \"off\" in case it is disabled.\n\n<Switch\n    label=\"This is a toggle\"\n    bind:value=\"toggleValue\"\n    disabled=\"checkDisabled()\"\n    disabled_state=\"on\">\n</Switch>\n-->\n\n<div class=\"control-group vis-option-group vis-option-type-switch {highlight?'highlight':''}\">\n    <label class=\"switch-outer {disabled? 'disabled' :''}\" style=\"padding-left: 40px\">\n        <label class=\"switch\">\n            <input class=\"{disabled && disabled_state == 'on' ? 'disabled-force-checked' : disabled && disabled_state == 'off' ? 'disabled-force-unchecked' : ''}\" disabled=\"{disabled}\" bind:checked=\"value \"type=\"checkbox\"><span class=\"slider round\"></span>\n        </label>\n        {@html label }\n    </label>\n    {#if disabled && disabled_msg}\n        <div transition:slide>\n            <div class=\"disabled-msg\">\n                {@html disabled_msg}\n            </div>\n        </div>\n    {:else}\n    {#if !disabled && value}\n        <div transition:slide>\n            <div class=\"switch-content\">\n                <slot>\n                </slot>\n            </div>\n        </div>\n    {/if}\n    {/if}\n</div>\n\n<style>.vis-option-type-switch {\n  border-bottom: 1px solid #ddd;\n  padding-bottom: 3px;\n  margin-bottom: 7px;\n  transition: height 0.2s ease-in-out;\n  background: #ffffff00;\n}\n.vis-option-type-switch:last-child {\n  border-bottom: none;\n}\n.switch-content > :first-child {\n  padding-top: 5px;\n}\n.switch-content > :last-child {\n  padding-bottom: 3px;\n}\n.switch-content,\n.disabled-msg {\n  padding: 0 0 0px 40px;\n}\n.disabled-msg {\n  font-size: 11px;\n  padding-top: 0;\n  padding-bottom: 5px;\n  font-style: italic;\n  color: #a8a8a8;\n  line-height: 1.2;\n}\n/* The switch - the box around the slider */\n.switch {\n  position: absolute;\n  display: inline-block;\n  width: 30px;\n  left: 2px;\n  top: 0;\n  height: 16px;\n}\n.switch-outer.disabled {\n  color: #888;\n}\n/* Hide default HTML checkbox */\n.switch input {\n  display: none;\n}\n/* The slider */\n.slider {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  -webkit-transition: .2s;\n  transition: .2s;\n}\n.slider:before {\n  position: absolute;\n  content: \"\";\n  height: 12px;\n  width: 12px;\n  left: 2px;\n  bottom: 2px;\n  background-color: white;\n  -webkit-transition: 0.2s ease-in-out;\n  transition: 0.2s ease-in-out;\n}\ninput:checked + .slider {\n  background-color: #18a1cd;\n}\ninput:checked:disabled + .slider {\n  background-color: #ccc;\n}\ninput:focus + .slider {\n  box-shadow: 0 0 1px #18a1cd;\n}\ninput.disabled-force-checked + .slider:before,\ninput:checked + .slider:before {\n  -webkit-transform: translateX(13px);\n  -ms-transform: translateX(13px);\n  transform: translateX(13px);\n}\ninput.disabled-force-unchecked + .slider:before {\n  -webkit-transform: translateX(0px);\n  -ms-transform: translateX(0px);\n  transform: translateX(0px);\n}\n/* Rounded sliders */\n.slider.round {\n  border-radius: 16px;\n}\n.slider.round:before {\n  border-radius: 50%;\n}\n</style>\n\n<script>\n    import slide from 'svelte-transitions-slide';\n\n    export default {\n        transitions: { slide },\n        onstate({changed, current}) {\n            if (changed.value && current.value) {\n                this.set({highlight:true});\n                setTimeout(() => {\n                    this.set({highlight:false});\n                }, 300);\n            }\n        },\n        data() {\n            return {\n                disabled_msg: '',\n                disabled_state: 'auto',\n                disabled: false,\n                highlight: false\n            }\n        }\n    }\n</script>\n",
    "<div class=\"control-group vis-option-group\">\n    <label class=\"control-label\">\n        {@html label }\n    </label>\n\n    <div class=\"controls form-inline\">\n        <select bind:value=\"selected\">\n            {#if $visMeta && $visMeta.axes[axis].optional}\n            <option value=\"-\">{axis['na-label']||'--'}</option>\n            {/if}\n            {#each columns as column}\n            <option value=\"{column.name}\">{column.name}</option>\n            {/each}\n        </select>\n    </div>\n</div>\n\n<style>\n.control-label { width: 100px!important; vertical-align: baseline; }\nselect { width: 170px!important; }\n</style>\n\n<script>\nexport default {\n    computed: {\n        columns({ axis, $visMeta, $dataset }) {\n            const columns = [];\n            // const axisMeta =\n            if (!$dataset || !$visMeta || !axis) return [];\n            $dataset.eachColumn((column) => {\n                if (_.indexOf($visMeta.axes[axis].accepts, column.type()) > -1) {\n                    columns.push({\n                        name: column.name()\n                    });\n                }\n            });\n            return columns;\n        }\n    },\n    data() {\n        return {\n            selected: false\n        };\n    },\n    oncreate() {\n        const me = this;\n        me.observe('selected', (sel) => {\n            if (sel) {\n                const {axis} = me.get();\n                var axes = _.clone(window.chart.get('metadata.axes', {}));\n                if (sel == '-') delete axes[axis];\n                else axes[axis] = sel;\n                window.chart.set('metadata.axes', axes);\n            }\n        });\n        me.store.observe('visMeta', (visMeta) => {\n            let {selected, axis} = me.get();\n            if (!selected && visMeta) {\n                // initialize!\n                selected = window.chart.get('metadata.axes')[axis];\n                me.set({selected});\n            }\n        });\n    }\n};\n</script>\n"
  ],
  "names": [],
  "mappings": "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"
}