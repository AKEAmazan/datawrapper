{
  "version": 3,
  "file": "controls.css",
  "sources": [
    "../../../../src/controls/ColorPicker.html",
    "../../../../src/controls/Number.html",
    "../../../../src/controls/SelectAxisColumn.html"
  ],
  "sourcesContent": [
    "<div class=\"color-picker-cont\">\n    <div on:click=\"set({visible:true})\" class=\"base-color-picker color-picker\" style=\"background: {{color}} none repeat scroll 0% 0%;\">\n        <div class=\"arrow\"></div>\n    </div>\n    {{#if visible && color}}\n    <div class=\"color-selector\">\n        <div class=\"palette\">\n            {{#each palette as c}}\n            <div class=\"color\" on:click=\"set({color:c})\" on:dblclick=\"set({color:c, visible:false})\" data-color=\"{{c}}\" style=\"background: {{c}}\"></div>\n            {{/each}}\n        </div>\n\n        <div class=\"color-axis lightness\">\n            {{#each gradient_l as c}}\n            <div class=\"color {{c == nearest_l?'selected':''}}\" on:click=\"set({color:c})\" data-color=\"{{c}}\" style=\"background: {{c}}\"></div>\n            {{/each}}\n        </div>\n        <div class=\"color-axis saturation\">\n            {{#each gradient_c as c}}\n            <div class=\"color {{c == nearest_c?'selected':''}}\" on:click=\"set({color:c})\" data-color=\"{{c}}\" style=\"background: {{c}}\"></div>\n            {{/each}}\n        </div>\n        <div class=\"color-axis hue\">\n            {{#each gradient_h as c}}\n            <div class=\"color {{c == nearest_h?'selected':''}}\" on:click=\"set({color:c})\" data-color=\"{{c}}\" style=\"background: {{c}}\"></div>\n            {{/each}}\n        </div>\n\n        <div class=\"footer\">\n            <input type=\"text\" style=\"background: {{color}}; border-color: {{borderColor}}; color: {{textColor}}\" bind:value=\"color\" class=\"hex\">\n            <button class=\"btn btn-small ok\" on:click=\"set({visible:false})\"><i class=\"icon-ok\"></i></button>\n            <div class=\"color selected\" style=\"background: {{color}}\"></div>\n        </div>\n    </div>\n    {{/if}}\n</div>\n<script>\n\n    import chroma from 'chroma';\n\n    let ref;\n\n    export default {\n        computed: {\n            gradient_l (color) {\n                const lch = chroma(color).lch();\n                const sample = spread(70, 55, 7, 6).map((l) => chroma.lch(l, lch[1], lch[2]).hex());\n                return chroma.scale(['#000000'].concat(sample).concat('#ffffff'))\n                    .mode('lch')\n                    .gamma(0.8)\n                    .padding(0.1)\n                    .colors(14);\n            },\n            gradient_c (color, palette) {\n                let high = chroma(color).set('lch.c', 120);\n                if (isNaN(high.get('lch.h'))) {\n                    high = chroma.lch(high.get('lch.l'), 50, chroma(palette[0]).get('lch.h'));\n                }\n                const low = chroma(color).set('lch.c', 3);\n                return chroma.scale([low, high])\n                    .mode('lch')\n                    .gamma(1.2)\n                    .colors(14);\n            },\n            gradient_h (color) {\n                const lch = chroma(color).lch();\n                const sample = spread(lch[2], 75, 7, 6)\n                    .map((h) => chroma.lch(lch[0], lch[1], h).hex());\n                return chroma.scale(sample)\n                    .mode('lch')\n                    .colors(14);\n            },\n            nearest_l (color, gradient_l) { return findNearest(gradient_l, color); },\n            nearest_c (color, gradient_c) { return findNearest(gradient_c, color); },\n            nearest_h (color, gradient_h) { return findNearest(gradient_h, color); },\n            textColor (color) {\n                return chroma(color).get('lab.l') > 60 ? 'black' : 'white';\n            },\n            borderColor (color) {\n                return chroma(color).darker().hex();\n            }\n        },\n        data() {\n            return {\n                palette: [],\n                color: '#63c0de',\n                visible: false\n            };\n        },\n        oncreate() {\n            const me = this;\n            me.observe('color', (color, old_color) => {\n                const {visible} = me.get();\n                if (visible && color != old_color) me.fire('change', color);\n            });\n            ref = this;\n            window.document.body.addEventListener('click', this.bodyClick);\n        },\n        ondestroy() {\n            window.document.body.removeEventListener('click', this.bodyClick);\n        },\n        methods: {\n            bodyClick (event) {\n                if (!ref.get) return;\n                const {visible} = ref.get();\n                let el = event.target;\n                if (visible) {\n                    while (!el.classList.contains('color-picker-cont') &&\n                        el.nodeName.toLowerCase() != 'body') {\n                        el = el.parentNode;\n                    }\n                    ref.set({visible: el != window.document.body});\n                }\n            }\n        }\n    };\n\n    function findNearest(colors, color) {\n        let nearest_i = -1;\n        let nearest_dist = 999999;\n        if (colors[0] == colors[1]) return '-';\n        colors.forEach((c,i) => {\n            const dist = chroma.distance(c, color, 'lab');\n            if (dist < nearest_dist) {\n                nearest_dist = dist;\n                nearest_i = i;\n            }\n        });\n        return colors[nearest_i];\n    }\n\n    function spread(center, width, num, num2, exp) {\n        var r = [center], s = width / num, a = 0;\n        num2 = _.isUndefined(num2) ? num : num2;\n        exp = exp || 1;\n        while (num-- > 0) {\n            a += s;\n            r.unshift(center - a);\n            if (num2-- > 0) r.push(center + a);\n        }\n        return r;\n    }\n\n</script>\n\n<style>\n.color-picker-cont { display: inline-block; }\ninput.hex { margin-bottom:0!important; }\n</style>\n",
    "<div class=\"control-group vis-option-group vis-option-type-number\">\n    <label style=\"width:{{width}}\" class=\"control-label\">{{{ label }}}</label>\n    <div class=\"controls\">\n        <input type=\"range\" min=\"{{min}}\" max=\"{{max}}\" step=\"{{step}}\" bind:value />&nbsp;&nbsp;<input type=\"number\" min=\"{{min}}\" max=\"{{max}}\" step=\"{{step}}\" bind:value/> <span class=\"unit\">{{unit}}</span>\n    </div>\n</div>\n\n<style>\n    input[type=\"range\"] {\n        width: 130px;\n    }\n    input[type=\"number\"] {\n        width: 50px;\n        text-align: center;\n        border: 0;\n        background: #fcfcfc;\n    }\n    .unit {\n        font-weight: 300;\n        color: #999;\n    }\n</style>\n\n<script>\n    export default {\n        data () {\n            return {\n                unit: '',\n                width: '100px'\n            };\n        }\n    };\n</script>\n",
    "<div class=\"control-group vis-option-group\">\n    <label class=\"control-label\">\n        {{{ label }}}\n    </label>\n\n    <div class=\"controls form-inline\">\n        <select bind:value=\"selected\">\n            {{#if $visMeta && $visMeta.axes[axis].optional}}\n            <option value=\"-\">{{axis['na-label']||'--'}}</option>\n            {{/if}}\n            {{#each columns as column}}\n            <option value=\"{{column.name}}\">{{column.name}}</option>\n            {{/each}}\n        </select>\n    </div>\n</div>\n\n<style>\n.control-label { width: 100px!important; vertical-align: baseline; }\nselect { width: 170px!important; }\n</style>\n\n<script>\nexport default {\n    computed: {\n        columns(axis, $visMeta, $dataset) {\n            const columns = [];\n            // const axisMeta =\n            if (!$dataset || !$visMeta || !axis) return [];\n            $dataset.eachColumn((column) => {\n                if (_.indexOf($visMeta.axes[axis].accepts, column.type()) > -1) {\n                    columns.push({\n                        name: column.name()\n                    });\n                }\n            });\n            return columns;\n        }\n    },\n    data() {\n        return {\n            selected: false\n        };\n    },\n    oncreate() {\n        const me = this;\n        me.observe('selected', (sel) => {\n            if (sel) {\n                const {axis} = me.get();\n                var axes = _.clone(window.chart.get('metadata.axes', {}));\n                if (sel == '-') delete axes[axis];\n                else axes[axis] = sel;\n                window.chart.set('metadata.axes', axes);\n            }\n        });\n        me.store.observe('visMeta', (visMeta) => {\n            let {selected, axis} = me.get();\n            if (!selected && visMeta) {\n                // initialize!\n                selected = window.chart.get('metadata.axes')[axis];\n                me.set({selected});\n            }\n        });\n    }\n};\n</script>\n"
  ],
  "names": [],
  "mappings": "AAkJA,kBAAkB,mBAAC,CAAC,AAAC,OAAO,CAAE,YAAY,AAAE,CAAC,AAC7C,KAAK,IAAI,mBAAC,CAAC,AAAC,cAAc,CAAC,UAAU,AAAE,CAAC;AC3IpC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAC,CAAC,AACjB,KAAK,CAAE,KAAK,AAChB,CAAC,AACD,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,mBAAC,CAAC,AAClB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,OAAO,AACvB,CAAC,AACD,KAAK,mBAAC,CAAC,AACH,WAAW,CAAE,GAAG,CAChB,KAAK,CAAE,IAAI,AACf,CAAC;ACFL,cAAc,kBAAC,CAAC,AAAC,KAAK,CAAE,KAAK,UAAU,CAAE,cAAc,CAAE,QAAQ,AAAE,CAAC,AACpE,MAAM,kBAAC,CAAC,AAAC,KAAK,CAAE,KAAK,UAAU,AAAE,CAAC"
}