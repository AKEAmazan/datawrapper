{
  "version": 3,
  "file": "controls.css",
  "sources": [
    "../../../../src/controls/Checkbox.html",
    "../../../../src/controls/ColorPicker.html",
    "../../../../src/controls/CustomFormat.html",
    "../../../../src/controls/Number.html",
    "../../../../src/controls/SelectAxisColumn.html"
  ],
  "sourcesContent": [
    "<div class=\"control-group vis-option-group vis-option-type-checkbox\">\n    <label class=\"checkbox {disabled? 'disabled' :''}\">\n        <input type=\"checkbox\" disabled=\"{disabled}\" bind:checked=\"value\" />&nbsp;{ label }\n    </label>\n</div>\n\n<style>label.checkbox {\n  text-align: left;\n  width: 100%;\n  position: relative;\n  left: 0;\n}\nlabel.checkbox.disabled {\n  color: #999;\n}\nlabel.checkbox.disabled input {\n  opacity: 0.5;\n}\n</style>\n\n<script>\n    export default {\n        data() {\n            return {\n                disabled: false\n            }\n        }\n    }\n</script>\n",
    "<div class=\"color-picker-cont\">\n    <div on:click=\"set({visible:true})\">\n        <slot>\n            <div class=\"base-color-picker color-picker\" style=\"background: {color} none repeat scroll 0% 0%;\">\n                <div class=\"arrow\"></div>\n            </div>\n        </slot>\n    </div>\n    {#if visible && color}\n    <div class=\"color-selector\">\n        <div class=\"palette\">\n            {#each palette as c}\n            <div class=\"color\" on:click=\"set({color:c})\" on:dblclick=\"set({color:c, visible:false})\" data-color=\"{c}\" style=\"background: {c}\"></div>\n            {/each}\n        </div>\n\n        <div class=\"color-axis lightness\">\n            {#each gradient_l as c}\n            <div class=\"color {c == nearest_l?'selected':''}\" on:click=\"set({color:c})\" data-color=\"{c}\" style=\"background: {c}\"></div>\n            {/each}\n        </div>\n        <div class=\"color-axis saturation\">\n            {#each gradient_c as c}\n            <div class=\"color {c == nearest_c?'selected':''}\" on:click=\"set({color:c})\" data-color=\"{c}\" style=\"background: {c}\"></div>\n            {/each}\n        </div>\n        <div class=\"color-axis hue\">\n            {#each gradient_h as c}\n            <div class=\"color {c == nearest_h?'selected':''}\" on:click=\"set({color:c})\" data-color=\"{c}\" style=\"background: {c}\"></div>\n            {/each}\n        </div>\n\n        <div class=\"footer\">\n            <input type=\"text\" style=\"background: {color}; border-color: {borderColor}; color: {textColor}\" bind:value=\"color\" class=\"hex\">\n            <button class=\"btn btn-small ok\" on:click=\"set({visible:false})\"><i class=\"icon-ok\"></i></button>\n            <div class=\"color selected\" style=\"background: {color}\"></div>\n        </div>\n    </div>\n    {/if}\n</div>\n<script>\n\n    import chroma from 'chroma';\n\n    let ref;\n\n    export default {\n        computed: {\n            palette({$theme}) {\n                return $theme.colors.palette;\n            },\n            gradient_l ({ color }) {\n                const lch = chroma(color).lch();\n                const sample = spread(70, 55, 7, 6).map((l) => chroma.lch(l, lch[1], lch[2]).hex());\n                return chroma.scale(['#000000'].concat(sample).concat('#ffffff'))\n                    .mode('lch')\n                    .gamma(0.8)\n                    .padding(0.1)\n                    .colors(14);\n            },\n            gradient_c ({ color, palette }) {\n                let high = chroma(color).set('lch.c', 120);\n                if (isNaN(high.get('lch.h'))) {\n                    high = chroma.lch(high.get('lch.l'), 50, chroma(palette[0]).get('lch.h'));\n                }\n                const low = chroma(color).set('lch.c', 3);\n                return chroma.scale([low, high])\n                    .mode('lch')\n                    .gamma(1.2)\n                    .colors(14);\n            },\n            gradient_h ({ color }) {\n                const lch = chroma(color).lch();\n                const sample = spread(lch[2], 75, 7, 6)\n                    .map((h) => chroma.lch(lch[0], lch[1], h).hex());\n                return chroma.scale(sample)\n                    .mode('lch')\n                    .colors(14);\n            },\n            nearest_l ({ color, gradient_l }) { return findNearest(gradient_l, color); },\n            nearest_c ({ color, gradient_c }) { return findNearest(gradient_c, color); },\n            nearest_h ({ color, gradient_h }) { return findNearest(gradient_h, color); },\n            textColor ({ color }) {\n                return chroma(color).get('lab.l') > 60 ? 'black' : 'white';\n            },\n            borderColor ({ color }) {\n                return chroma(color).darker().hex();\n            }\n        },\n        data() {\n            return {\n                palette: [],\n                color: '#63c0de',\n                visible: false\n            };\n        },\n        oncreate() {\n            const me = this;\n            me.observe('color', (color, old_color) => {\n                const {visible} = me.get();\n                if (visible && color != old_color) me.fire('change', color);\n            });\n            ref = this;\n            window.document.body.addEventListener('click', this.bodyClick);\n        },\n        ondestroy() {\n            window.document.body.removeEventListener('click', this.bodyClick);\n        },\n        methods: {\n            bodyClick (event) {\n                if (!ref.get) return;\n                const {visible} = ref.get();\n                let el = event.target;\n                if (visible) {\n                    while (!el.classList.contains('color-picker-cont') &&\n                        el.nodeName.toLowerCase() != 'body') {\n                        el = el.parentNode;\n                    }\n                    ref.set({visible: el != window.document.body});\n                }\n            }\n        }\n    };\n\n    function findNearest(colors, color) {\n        let nearest_i = -1;\n        let nearest_dist = 999999;\n        if (colors[0] == colors[1]) return '-';\n        colors.forEach((c,i) => {\n            const dist = chroma.distance(c, color, 'lab');\n            if (dist < nearest_dist) {\n                nearest_dist = dist;\n                nearest_i = i;\n            }\n        });\n        return colors[nearest_i];\n    }\n\n    function spread(center, width, num, num2, exp) {\n        var r = [center], s = width / num, a = 0;\n        num2 = _.isUndefined(num2) ? num : num2;\n        exp = exp || 1;\n        while (num-- > 0) {\n            a += s;\n            r.unshift(center - a);\n            if (num2-- > 0) r.push(center + a);\n        }\n        return r;\n    }\n\n</script>\n\n<style>\n.color-picker-cont { display: inline-block; }\ninput.hex { margin-bottom:0!important; }\n</style>\n",
    "\n<div class=\"control-group vis-option-custom-format\">\n    <label class=\"control-label\">\n        {@html label }\n    </label>\n\n    <div class=\"controls form-inline\">\n        {#if selected == 'custom'}\n        <div class=\"small\">\n            For help on custom formats, check the {@html customFormatHelp}.\n        </div>\n        {/if}\n\n        <select bind:value=\"selected\">\n        {#each options as opt}\n            <option value=\"{opt.f}\">{opt.l}</option>\n        {/each}\n            <option value=\"custom\">(custom)</option>\n        </select>\n        {#if selected == 'custom'}\n        <input bind:value=\"custom\" type=\"text\" />\n        {/if}\n    </div>\n</div>\n\n<script>\n    export default {\n        computed: {\n            customFormatHelp ({ axisCol }) {\n                if (!axisCol) return;\n                if (axisCol.type() == 'date') return '<a href=\"http://momentjs.com/docs/#/displaying/format/\" target=\"_blank\">moment.js documentation</a>';\n                if (axisCol.type() == 'number') return '<a href=\"http://numeraljs.com/#format\" target=\"_blank\">numeral.js documentation</a>';\n                return '';\n            },\n            axisCol ({ $vis, $dataset, axis }) {\n                if (!$vis || !axis) return null;\n                const colids = $vis.axes()[axis];\n                return $dataset.column(typeof colids == 'object' ? colids[0] : colids);\n            },\n            options ({ axisCol }) {\n                if (!axisCol) return [];\n                if (axisCol.type() == 'number') {\n                    // todo: translate labels\n                    return [\n                        { l: '1,000[.00]', f: '0,0.[00]' },\n                        { l: '0', f: '0' },\n                        { l: '0.0', f: '0.0' },\n                        { l: '0.00', f: '0.00' },\n                        { l: '0.000', f: '0.000' },\n                        { l: '0.[0]', f: '0.[0]' },\n                        { l: '0.[00]', f: '0.[00]' },\n                        { l: '0%', f: '0%' },\n                        { l: '0.0%', f: '0.0%' },\n                        { l: '0.00%', f: '0.00%' },\n                        { l: '0.[0]%', f: '0.[0]%' },\n                        { l: '0.[00]%', f: '0.[00]%' },\n                        { l: '10,000', f: '0,0' },\n                        { l: '1st', f: '0o' },\n                        { l: '123k', f: '0a' },\n                        { l: '123.4k', f: '0.[0]a' },\n                        { l: '123.45k', f: '0.[00]a' },\n                    ];\n                }\n                if (axisCol.type() == 'date') {\n                    // todo translate\n                    return [\n                        { l: '2015, 2016', f: 'YYYY' },\n                        { l: '2015 Q1, 2015 Q2', f: 'YYYY [Q]Q' },\n                        { l: '2015, Q2, Q3', f: 'YYYY|\\\\QQ' },\n                        { l: '2015, Feb, Mar', f: 'YYYY|MMM' },\n                        { l: '’15, ’16', f: '’YY' },\n                        { l: 'April, May', f: 'MMMM' },\n                        { l: 'Apr, May', f: 'MMM' },\n                        { l: 'Apr ’15, May ’15', f: 'MMM ’YY' },\n                        { l: 'April, 2, 3', f: 'MMM|DD' },\n                    ];\n                }\n            }\n        },\n        data() {\n            return {\n                axis: false,\n                value: '',\n                custom: '',\n                selected: null\n            }\n        },\n        oncreate() {\n            // watch select input\n            this.observe('selected', (sel, old) => {\n                if (sel == old) return;\n                const {custom} = this.get();\n                this.set({value: sel != 'custom' ? sel : custom+' '});\n            });\n            // watch external value changes\n            this.observe('value', (val, old) => {\n                if (val == old) return;\n                const {options} = this.get();\n                let found = false;\n                for (let o of options) {\n                    if (o.f == val) return this.set({selected: val});\n                }\n                this.set({selected: 'custom', custom: val});\n            });\n            this.observe('custom', (val, old) => {\n                if (val == old) return;\n                const {selected} = this.get();\n                if (selected == 'custom') this.set({value:val});\n            });\n        }\n    };\n</script>\n\n<style>\n.control-label {\n    width: 100px!important;\n}\nselect, input {\n    width: 110px!important;\n    vertical-align: baseline;\n}\ninput {\n    width: 100px!important;\n}\n.small {\n    font-size: 12px;\n    line-height: 14px;\n    font-style: italic;\n    color: #999;\n    max-width: 210px;\n    margin-bottom: 6px;\n}\n</style>\n",
    "<div class=\"control-group vis-option-group vis-option-type-number\">\n    <label style=\"width:{width}\" class=\"control-label\">{@html label }</label>\n    <div class=\"controls\">\n        <input type=\"range\" min=\"{min}\" max=\"{max}\" step=\"{step}\" bind:value />&nbsp;&nbsp;<input type=\"number\" min=\"{min}\" max=\"{max}\" step=\"{step}\" bind:value/> <span class=\"unit\">{unit}</span>\n    </div>\n</div>\n\n<style>\n    input[type=\"range\"] {\n        width: 130px;\n    }\n    input[type=\"number\"] {\n        width: 50px;\n        text-align: center;\n        border: 0;\n        background: #fcfcfc;\n    }\n    .unit {\n        font-weight: 300;\n        color: #999;\n    }\n</style>\n\n<script>\n    export default {\n        data () {\n            return {\n                unit: '',\n                width: '100px'\n            };\n        }\n    };\n</script>\n",
    "<div class=\"control-group vis-option-group\">\n    <label class=\"control-label\">\n        {@html label }\n    </label>\n\n    <div class=\"controls form-inline\">\n        <select bind:value=\"selected\">\n            {#if $visMeta && $visMeta.axes[axis].optional}\n            <option value=\"-\">{axis['na-label']||'--'}</option>\n            {/if}\n            {#each columns as column}\n            <option value=\"{column.name}\">{column.name}</option>\n            {/each}\n        </select>\n    </div>\n</div>\n\n<style>\n.control-label { width: 100px!important; vertical-align: baseline; }\nselect { width: 170px!important; }\n</style>\n\n<script>\nexport default {\n    computed: {\n        columns({ axis, $visMeta, $dataset }) {\n            const columns = [];\n            // const axisMeta =\n            if (!$dataset || !$visMeta || !axis) return [];\n            $dataset.eachColumn((column) => {\n                if (_.indexOf($visMeta.axes[axis].accepts, column.type()) > -1) {\n                    columns.push({\n                        name: column.name()\n                    });\n                }\n            });\n            return columns;\n        }\n    },\n    data() {\n        return {\n            selected: false\n        };\n    },\n    oncreate() {\n        const me = this;\n        me.observe('selected', (sel) => {\n            if (sel) {\n                const {axis} = me.get();\n                var axes = _.clone(window.chart.get('metadata.axes', {}));\n                if (sel == '-') delete axes[axis];\n                else axes[axis] = sel;\n                window.chart.set('metadata.axes', axes);\n            }\n        });\n        me.store.observe('visMeta', (visMeta) => {\n            let {selected, axis} = me.get();\n            if (!selected && visMeta) {\n                // initialize!\n                selected = window.chart.get('metadata.axes')[axis];\n                me.set({selected});\n            }\n        });\n    }\n};\n</script>\n"
  ],
  "names": [],
  "mappings": "AAMO,KAAK,SAAS,cAAC,CAAC,AACrB,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,IAAI,CACX,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,AACT,CAAC,AACD,KAAK,SAAS,SAAS,cAAC,CAAC,AACvB,KAAK,CAAE,IAAI,AACb,CAAC,AACD,KAAK,SAAS,uBAAS,CAAC,KAAK,cAAC,CAAC,AAC7B,OAAO,CAAE,GAAG,AACd,CAAC;ACwID,kBAAkB,cAAC,CAAC,AAAC,OAAO,CAAE,YAAY,AAAE,CAAC,AAC7C,KAAK,IAAI,cAAC,CAAC,AAAC,cAAc,CAAC,UAAU,AAAE,CAAC;ACxCxC,cAAc,cAAC,CAAC,AACZ,KAAK,CAAE,KAAK,UAAU,AAC1B,CAAC,AACD,oBAAM,CAAE,KAAK,cAAC,CAAC,AACX,KAAK,CAAE,KAAK,UAAU,CACtB,cAAc,CAAE,QAAQ,AAC5B,CAAC,AACD,KAAK,cAAC,CAAC,AACH,KAAK,CAAE,KAAK,UAAU,AAC1B,CAAC,AACD,MAAM,cAAC,CAAC,AACJ,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,IAAI,CACjB,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,KAAK,CAChB,aAAa,CAAE,GAAG,AACtB,CAAC;AC3HG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,cAAC,CAAC,AACjB,KAAK,CAAE,KAAK,AAChB,CAAC,AACD,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAC,CAAC,AAClB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,OAAO,AACvB,CAAC,AACD,KAAK,cAAC,CAAC,AACH,WAAW,CAAE,GAAG,CAChB,KAAK,CAAE,IAAI,AACf,CAAC;ACFL,cAAc,cAAC,CAAC,AAAC,KAAK,CAAE,KAAK,UAAU,CAAE,cAAc,CAAE,QAAQ,AAAE,CAAC,AACpE,MAAM,cAAC,CAAC,AAAC,KAAK,CAAE,KAAK,UAAU,AAAE,CAAC"
}