{
  "version": 3,
  "file": "controls.css",
  "sources": [
    "../../../../src/controls/Checkbox.html",
    "../../../../src/controls/ColorPicker.html",
    "../../../../src/controls/CustomFormat.html",
    "../../../../src/controls/Number.html",
    "../../../../src/controls/SelectAxisColumn.html",
    "../../../../src/controls/Handsontable.html"
  ],
  "sourcesContent": [
    "<div class=\"control-group vis-option-group vis-option-type-checkbox\">\n    <label class=\"checkbox {{disabled? 'disabled' :''}}\">\n        <input type=\"checkbox\" disabled=\"{{disabled}}\" bind:checked=\"value\" />&nbsp;{{ label }}\n    </label>\n</div>\n\n<style>label.checkbox {\n  text-align: left;\n  width: 100%;\n  position: relative;\n  left: 0;\n}\nlabel.checkbox.disabled {\n  color: #999;\n}\nlabel.checkbox.disabled input {\n  opacity: 0.5;\n}\n</style>\n\n<script>\n    export default {\n        data() {\n            return {\n                disabled: false\n            }\n        }\n    }\n</script>\n",
    "<div class=\"color-picker-cont\">\n    <div on:click=\"set({visible:true})\" class=\"base-color-picker color-picker\" style=\"background: {{color}} none repeat scroll 0% 0%;\">\n        <div class=\"arrow\"></div>\n    </div>\n    {{#if visible && color}}\n    <div class=\"color-selector\">\n        <div class=\"palette\">\n            {{#each palette as c}}\n            <div class=\"color\" on:click=\"set({color:c})\" on:dblclick=\"set({color:c, visible:false})\" data-color=\"{{c}}\" style=\"background: {{c}}\"></div>\n            {{/each}}\n        </div>\n\n        <div class=\"color-axis lightness\">\n            {{#each gradient_l as c}}\n            <div class=\"color {{c == nearest_l?'selected':''}}\" on:click=\"set({color:c})\" data-color=\"{{c}}\" style=\"background: {{c}}\"></div>\n            {{/each}}\n        </div>\n        <div class=\"color-axis saturation\">\n            {{#each gradient_c as c}}\n            <div class=\"color {{c == nearest_c?'selected':''}}\" on:click=\"set({color:c})\" data-color=\"{{c}}\" style=\"background: {{c}}\"></div>\n            {{/each}}\n        </div>\n        <div class=\"color-axis hue\">\n            {{#each gradient_h as c}}\n            <div class=\"color {{c == nearest_h?'selected':''}}\" on:click=\"set({color:c})\" data-color=\"{{c}}\" style=\"background: {{c}}\"></div>\n            {{/each}}\n        </div>\n\n        <div class=\"footer\">\n            <input type=\"text\" style=\"background: {{color}}; border-color: {{borderColor}}; color: {{textColor}}\" bind:value=\"color\" class=\"hex\">\n            <button class=\"btn btn-small ok\" on:click=\"set({visible:false})\"><i class=\"icon-ok\"></i></button>\n            <div class=\"color selected\" style=\"background: {{color}}\"></div>\n        </div>\n    </div>\n    {{/if}}\n</div>\n<script>\n\n    import chroma from 'chroma';\n\n    let ref;\n\n    export default {\n        computed: {\n            gradient_l (color) {\n                const lch = chroma(color).lch();\n                const sample = spread(70, 55, 7, 6).map((l) => chroma.lch(l, lch[1], lch[2]).hex());\n                return chroma.scale(['#000000'].concat(sample).concat('#ffffff'))\n                    .mode('lch')\n                    .gamma(0.8)\n                    .padding(0.1)\n                    .colors(14);\n            },\n            gradient_c (color, palette) {\n                let high = chroma(color).set('lch.c', 120);\n                if (isNaN(high.get('lch.h'))) {\n                    high = chroma.lch(high.get('lch.l'), 50, chroma(palette[0]).get('lch.h'));\n                }\n                const low = chroma(color).set('lch.c', 3);\n                return chroma.scale([low, high])\n                    .mode('lch')\n                    .gamma(1.2)\n                    .colors(14);\n            },\n            gradient_h (color) {\n                const lch = chroma(color).lch();\n                const sample = spread(lch[2], 75, 7, 6)\n                    .map((h) => chroma.lch(lch[0], lch[1], h).hex());\n                return chroma.scale(sample)\n                    .mode('lch')\n                    .colors(14);\n            },\n            nearest_l (color, gradient_l) { return findNearest(gradient_l, color); },\n            nearest_c (color, gradient_c) { return findNearest(gradient_c, color); },\n            nearest_h (color, gradient_h) { return findNearest(gradient_h, color); },\n            textColor (color) {\n                return chroma(color).get('lab.l') > 60 ? 'black' : 'white';\n            },\n            borderColor (color) {\n                return chroma(color).darker().hex();\n            }\n        },\n        data() {\n            return {\n                palette: [],\n                color: '#63c0de',\n                visible: false\n            };\n        },\n        oncreate() {\n            const me = this;\n            me.observe('color', (color, old_color) => {\n                const {visible} = me.get();\n                if (visible && color != old_color) me.fire('change', color);\n            });\n            ref = this;\n            window.document.body.addEventListener('click', this.bodyClick);\n        },\n        ondestroy() {\n            window.document.body.removeEventListener('click', this.bodyClick);\n        },\n        methods: {\n            bodyClick (event) {\n                if (!ref.get) return;\n                const {visible} = ref.get();\n                let el = event.target;\n                if (visible) {\n                    while (!el.classList.contains('color-picker-cont') &&\n                        el.nodeName.toLowerCase() != 'body') {\n                        el = el.parentNode;\n                    }\n                    ref.set({visible: el != window.document.body});\n                }\n            }\n        }\n    };\n\n    function findNearest(colors, color) {\n        let nearest_i = -1;\n        let nearest_dist = 999999;\n        if (colors[0] == colors[1]) return '-';\n        colors.forEach((c,i) => {\n            const dist = chroma.distance(c, color, 'lab');\n            if (dist < nearest_dist) {\n                nearest_dist = dist;\n                nearest_i = i;\n            }\n        });\n        return colors[nearest_i];\n    }\n\n    function spread(center, width, num, num2, exp) {\n        var r = [center], s = width / num, a = 0;\n        num2 = _.isUndefined(num2) ? num : num2;\n        exp = exp || 1;\n        while (num-- > 0) {\n            a += s;\n            r.unshift(center - a);\n            if (num2-- > 0) r.push(center + a);\n        }\n        return r;\n    }\n\n</script>\n\n<style>\n.color-picker-cont { display: inline-block; }\ninput.hex { margin-bottom:0!important; }\n</style>\n",
    "\n<div class=\"control-group vis-option-custom-format\">\n    <label class=\"control-label\">\n        {{{ label }}}\n    </label>\n\n    <div class=\"controls form-inline\">\n        {{#if selected == 'custom'}}\n        <div class=\"small\">\n            For help on custom formats, check the {{{customFormatHelp}}}.\n        </div>\n        {{/if}}\n\n        <select bind:value=\"selected\">\n        {{#each options as opt}}\n            <option value=\"{{opt.f}}\">{{opt.l}}</option>\n        {{/each}}\n            <option value=\"custom\">(custom)</option>\n        </select>\n        {{#if selected == 'custom'}}\n        <input bind:value=\"custom\" type=\"text\" />\n        {{/if}}\n    </div>\n</div>\n\n<script>\n    export default {\n        computed: {\n            customFormatHelp (axisCol) {\n                if (!axisCol) return;\n                if (axisCol.type() == 'date') return '<a href=\"http://momentjs.com/docs/#/displaying/format/\" target=\"_blank\">moment.js documentation</a>';\n                if (axisCol.type() == 'number') return '<a href=\"http://numeraljs.com/#format\" target=\"_blank\">numeral.js documentation</a>';\n                return '';\n            },\n            axisCol ($vis, $dataset, axis) {\n                if (!$vis || !axis) return null;\n                const colids = $vis.axes()[axis];\n                return $dataset.column(typeof colids == 'object' ? colids[0] : colids);\n            },\n            options (axisCol) {\n                if (!axisCol) return [];\n                if (axisCol.type() == 'number') {\n                    // todo: translate labels\n                    return [\n                        { l: '1,000[.00]', f: '0,0.[00]' },\n                        { l: '0', f: '0' },\n                        { l: '0.0', f: '0.0' },\n                        { l: '0.00', f: '0.00' },\n                        { l: '0.000', f: '0.000' },\n                        { l: '0.[0]', f: '0.[0]' },\n                        { l: '0.[00]', f: '0.[00]' },\n                        { l: '0%', f: '0%' },\n                        { l: '0.0%', f: '0.0%' },\n                        { l: '0.00%', f: '0.00%' },\n                        { l: '0.[0]%', f: '0.[0]%' },\n                        { l: '0.[00]%', f: '0.[00]%' },\n                        { l: '10,000', f: '0,0' },\n                        { l: '1st', f: '0o' },\n                        { l: '123k', f: '0a' },\n                        { l: '123.4k', f: '0.[0]a' },\n                        { l: '123.45k', f: '0.[00]a' },\n                    ];\n                }\n                if (axisCol.type() == 'date') {\n                    // todo translate\n                    return [\n                        { l: '2015, 2016', f: 'YYYY' },\n                        { l: '2015 Q1, 2015 Q2', f: 'YYYY [Q]Q' },\n                        { l: '2015, Q2, Q3', f: 'YYYY|\\\\QQ' },\n                        { l: '2015, Feb, Mar', f: 'YYYY|MMM' },\n                        { l: '’15, ’16', f: '’YY' },\n                        { l: 'April, May', f: 'MMMM' },\n                        { l: 'Apr, May', f: 'MMM' },\n                        { l: 'Apr ’15, May ’15', f: 'MMM ’YY' },\n                        { l: 'April, 2, 3', f: 'MMM|DD' },\n                    ];\n                }\n            }\n        },\n        data() {\n            return {\n                axis: false,\n                value: '',\n                custom: '',\n                selected: null\n            }\n        },\n        oncreate() {\n            // watch select input\n            this.observe('selected', (sel, old) => {\n                if (sel == old) return;\n                this.set({value: sel != 'custom' ? sel : this.get('custom')+' '});\n            });\n            // watch external value changes\n            this.observe('value', (val, old) => {\n                if (val == old) return;\n                const {options} = this.get();\n                let found = false;\n                for (let o of options) {\n                    if (o.f == val) return this.set({selected: val});\n                }\n                this.set({selected: 'custom', custom: val});\n            });\n            this.observe('custom', (val, old) => {\n                if (val == old) return;\n                const {selected} = this.get();\n                if (selected == 'custom') this.set({value:val});\n            });\n        }\n    };\n</script>\n\n<style>\n.control-label {\n    width: 100px!important;\n}\nselect, input {\n    width: 110px!important;\n    vertical-align: baseline;\n}\ninput {\n    width: 100px!important;\n}\n.small {\n    font-size: 12px;\n    line-height: 14px;\n    font-style: italic;\n    color: #999;\n    max-width: 210px;\n    margin-bottom: 6px;\n}\n</style>\n",
    "<div class=\"control-group vis-option-group vis-option-type-number\">\n    <label style=\"width:{{width}}\" class=\"control-label\">{{{ label }}}</label>\n    <div class=\"controls\">\n        <input type=\"range\" min=\"{{min}}\" max=\"{{max}}\" step=\"{{step}}\" bind:value />&nbsp;&nbsp;<input type=\"number\" min=\"{{min}}\" max=\"{{max}}\" step=\"{{step}}\" bind:value/> <span class=\"unit\">{{unit}}</span>\n    </div>\n</div>\n\n<style>\n    input[type=\"range\"] {\n        width: 130px;\n    }\n    input[type=\"number\"] {\n        width: 50px;\n        text-align: center;\n        border: 0;\n        background: #fcfcfc;\n    }\n    .unit {\n        font-weight: 300;\n        color: #999;\n    }\n</style>\n\n<script>\n    export default {\n        data () {\n            return {\n                unit: '',\n                width: '100px'\n            };\n        }\n    };\n</script>\n",
    "<div class=\"control-group vis-option-group\">\n    <label class=\"control-label\">\n        {{{ label }}}\n    </label>\n\n    <div class=\"controls form-inline\">\n        <select bind:value=\"selected\">\n            {{#if $visMeta && $visMeta.axes[axis].optional}}\n            <option value=\"-\">{{axis['na-label']||'--'}}</option>\n            {{/if}}\n            {{#each columns as column}}\n            <option value=\"{{column.name}}\">{{column.name}}</option>\n            {{/each}}\n        </select>\n    </div>\n</div>\n\n<style>\n.control-label { width: 100px!important; vertical-align: baseline; }\nselect { width: 170px!important; }\n</style>\n\n<script>\nexport default {\n    computed: {\n        columns(axis, $visMeta, $dataset) {\n            const columns = [];\n            // const axisMeta =\n            if (!$dataset || !$visMeta || !axis) return [];\n            $dataset.eachColumn((column) => {\n                if (_.indexOf($visMeta.axes[axis].accepts, column.type()) > -1) {\n                    columns.push({\n                        name: column.name()\n                    });\n                }\n            });\n            return columns;\n        }\n    },\n    data() {\n        return {\n            selected: false\n        };\n    },\n    oncreate() {\n        const me = this;\n        me.observe('selected', (sel) => {\n            if (sel) {\n                const {axis} = me.get();\n                var axes = _.clone(window.chart.get('metadata.axes', {}));\n                if (sel == '-') delete axes[axis];\n                else axes[axis] = sel;\n                window.chart.set('metadata.axes', axes);\n            }\n        });\n        me.store.observe('visMeta', (visMeta) => {\n            let {selected, axis} = me.get();\n            if (!selected && visMeta) {\n                // initialize!\n                selected = window.chart.get('metadata.axes')[axis];\n                me.set({selected});\n            }\n        });\n    }\n};\n</script>\n",
    "<div id=\"data-preview\" ref:hot />\n\n<script>\n    /* global dw,chart */\n    import HOT from 'Handsontable';\n\n    let app = null;\n\n    export default {\n        methods: {\n            render() {\n                this.get('hot').render();\n            },\n            update() {\n                const {data, transpose, firstRowIsHeader, skipRows, hot} = this.get();\n\n                if (!data) return;\n\n                // get chart\n                const chart = this.store.get('dw_chart');\n\n                // pass dataset through chart to apply changes and computed columns\n                const ds = chart.dataset(dw.datasource.delimited({\n                    csv: data,\n                    transpose,\n                    firstRowIsHeader,\n                    skipRows\n                }).parse()).dataset();\n\n                this.set({columnOrder: ds.columnOrder()});\n\n                // construct HoT data array\n                const hot_data = [[]];\n                ds.eachColumn(c => hot_data[0].push(c.title()));\n\n                ds.eachRow(r => {\n                    const row = [];\n                    ds.eachColumn(col => row.push(col.raw(r)));\n                    hot_data.push(row);\n                });\n\n                // pass data to hot\n                hot.loadData(hot_data);\n\n                const cellRenderer = getCellRenderer(this, ds, HOT, {});\n\n                hot.updateSettings({\n                    cells: (row, col) => {\n                        const {readonly} = this.get();\n                        return {\n                            readOnly: readonly || (ds.hasColumn(col) && ds.column(col).isComputed && row === 0),\n                            renderer: cellRenderer\n                        };\n                    },\n                    manualColumnMove: []\n                });\n\n                this.set({ds});\n                this.set({has_changes: chart.get('metadata.data.changes', []).length > 0})\n\n                HOT.hooks.once('afterRender', () => this.initCustomEvents());\n                hot.render();\n            },\n            dataChanged (cells) {\n                const {hot} = this.get();\n                let changed = false;\n                cells.forEach(([row, col, old_val, new_val]) => {\n                    if (old_val != new_val) {\n                        const chart = this.store.get('dw_chart');\n                        const {transpose} = this.get();\n                        const changes = chart.get('metadata.data.changes', []);\n                        row = hot.toPhysicalRow(row);\n                        col = chart.dataset().columnOrder()[col];\n                        if (transpose) {\n                            // swap row and col\n                            const tmp = row;\n                            row = col;\n                            col = tmp;\n                        }\n                        // store new change\n                        changes.push({\n                            column: col, row, value: new_val, time: (new Date()).getTime()\n                        });\n                        chart.set('metadata.data.changes', changes);\n                        changed = true;\n                    }\n                })\n                if (changed) {\n                    setTimeout(() => {\n                        this.update();\n                        chart.save();\n                    }, 100);\n                }\n            },\n            columnMoved (srcColumns, tgtIndex) {\n                const {hot} = this.get();\n                if (!srcColumns.length) return;\n                const {columnOrder} = this.get();\n                const newOrder = columnOrder.slice(0);\n                const after = columnOrder[tgtIndex];\n                const elements = newOrder.splice(srcColumns[0], srcColumns.length);\n                const insertAt = after === undefined ? newOrder.length : after ? newOrder.indexOf(after) : 0;\n                newOrder.splice(insertAt, 0, ...elements);\n                this.store.get('dw_chart')\n                    .set('metadata.data.column-order', newOrder.slice(0));\n                this.set({columnOrder: newOrder});\n                // update selection\n                HOT.hooks.once('afterRender', () => {\n                    setTimeout(() => {\n                        this.fire('resetSort');\n                        hot.selectCell(0, insertAt, hot.countRows()-1,\n                            insertAt+elements.length-1);\n                    }, 10);\n                });\n                this.update();\n            },\n            updateHeight () {\n                const h = document.querySelector('.ht_master.handsontable .wtHolder .wtHider').getBoundingClientRect().height;\n                this.refs.hot.style.height = Math.min(500, h+10)+'px';\n            },\n            checkRange (r,c,r2,c2) {\n                // check if\n                // 1. only a single column is selected, and\n                // 2. the range starts at the first row, and\n                // 3. the range extends through he last row\n                const {hot} = this.get();\n                const {ds} = this.get();\n                const refs = this.refs;\n                if (c == c2 && r === 0 && r2 == hot.countRows()-1) {\n                    // const chart = this.store.get('dw_chart');\n                    // this.set({activeColumn: chart.dataset().column(c)});\n                    return;\n                }\n                if (c != c2 && r === 0 && r2 == hot.countRows()-1) {\n                    const sel = [];\n                    for (let i=Math.min(c,c2); i<=Math.max(c,c2); i ++) {\n                        sel.push(+document.querySelector(`#data-preview .htCore tbody tr:first-child td:nth-child(${i+2})`).dataset.column);\n                    }\n                    this.set({multiSelection:  sel.map(i => ds.column(i)), activeColumn:null});\n                    return;\n                }\n                this.set({activeColumn:null, multiSelection:false});\n            },\n            initCustomEvents () {\n                // wait a bit to make sure HoT is rendered\n                setTimeout(() => {\n                    // catch click events on A,B,C,D... header row\n                    this.refs.hot.querySelectorAll('.htCore thead th:first-child').forEach(th => {\n                        th.removeEventListener('click', topLeftCornerClick);\n                        th.addEventListener('click', topLeftCornerClick);\n                    });\n                    this.refs.hot.querySelectorAll('.htCore thead th+th').forEach(th => {\n                        th.removeEventListener('click', cellHeaderClick);\n                        th.addEventListener('click', cellHeaderClick);\n                    });\n                }, 500);\n            },\n\n            getColumnFormat(name) {\n                const chart = this.store.get('dw_chart');\n                const colFormats = chart.get('metadata.data.column-format', {});\n                return colFormats[name] || { type: 'auto', ignore: false };\n            }\n        },\n        computed: {\n            currentResult (searchResults, searchIndex) {\n                if (!searchResults || !searchResults.length) return null;\n                const l = searchResults.length;\n                if (searchIndex < 0 || searchIndex >= l) {\n                    while (searchIndex<0) searchIndex += l;\n                    if (searchIndex > l) searchIndex %= l;\n                }\n                return searchResults[searchIndex];\n            }\n        },\n        oncreate() {\n            app = this;\n            HOT.hooks.once('afterRender', () => this.initCustomEvents());\n\n            window.addEventListener('keyup', (evt) => {\n                const {activeColumn, ds} = this.get();\n                if (!activeColumn) return;\n                if (evt.key == 'ArrowRight' || evt.key == 'ArrowLeft') {\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                    const cur_i = ds.indexOf(activeColumn.name());\n                    if (evt.key == 'ArrowRight') {\n                        // select next column\n                        this.set({activeColumn: ds.column((cur_i+1) % ds.numColumns())});\n                    } else {\n                        // select prev column\n                        this.set({activeColumn: ds.column((cur_i-1+ds.numColumns()) % ds.numColumns())});\n                    }\n                }\n\n            });\n\n            const chart = this.store.get('dw_chart');\n\n            const hot = new HOT(this.refs.hot, {\n                data: [],\n                rowHeaders: (i) => {\n                    const ti = hot.getPlugin('ColumnSorting').translateRow(i);\n                    return ti+1;\n                },\n                colHeaders: true,\n                fixedRowsTop: 1,\n                filters: true,\n                dropdownMenu: true,\n                startRows: 13,\n                startCols: 8,\n                fillHandle: false,\n                stretchH: 'all',\n                height: 500,\n                manualColumnMove: true,\n                selectionMode: 'range',\n                autoColumnSize: {useHeaders: true, syncLimit: 5},\n                // comments: true,\n                // contextMenu: true,\n\n                // sorting\n                columnSorting: true,\n                sortIndicator: true,\n                sortFunction: function(sortOrder, columnMeta) {\n                    if (columnMeta.col > -1) {\n                        var column = chart.dataset().column(columnMeta.col);\n                        var colType = column.type();\n                        var plugin = hot.getPlugin('columnSorting');\n                        return function(a, b) {\n                            var sortFunction;\n                            if (a[0] === 0) return -1;\n                            // replace with values\n                            a[1] = column.val(a[0]-1);\n                            b[1] = column.val(b[0]-1);\n                            if (colType == 'number') {\n                                // sort NaNs at bottom\n                                if (isNaN(a[1])) a[1] = !sortOrder ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n                                if (isNaN(b[1])) b[1] = !sortOrder ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n                            }\n                            if (colType == 'date') {\n                                if (typeof a[1] == 'string') a[1] = new Date(110,0,1);\n                                if (typeof b[1] == 'string') b[1] = new Date(110,0,1);\n                            }\n                            switch (colType) {\n                                case 'date':\n                                    sortFunction = plugin.dateSort;\n                                    break;\n                                case 'number':\n                                    sortFunction = plugin.numericSort;\n                                    break;\n                                default:\n                                    sortFunction = plugin.defaultSort;\n                            }\n                            return sortFunction(sortOrder, columnMeta)(a, b);\n                        };\n                    }\n                    return (a,b) => a[0]-b[0];\n                },\n                afterGetColHeader: (col, th) => {\n                    const {activeColumn, ds} = this.get();\n                    if (!ds || !ds.hasColumn(col)) return;\n                    if ((col === 0 || col) && activeColumn && ds.column(col).name() == activeColumn.name()) {\n                        th.classList.add('selected');\n                    }\n\n                    if (col === 0 || col) {\n                        if (this.getColumnFormat(ds.column(col).name()).ignore) {\n                            th.classList.add('ignored');\n                        } else {\n                            th.classList.remove('ignored');\n                        }\n                    }\n                },\n                // search\n                search: 'search'\n            });\n\n            window.HT = hot;\n            this.set({hot});\n\n            HOT.hooks.add('afterSetDataAtCell', (a) => this.dataChanged(a));\n            HOT.hooks.add('afterColumnMove', (a,b) => this.columnMoved(a,b));\n            HOT.hooks.add('afterRender', () => this.updateHeight());\n            HOT.hooks.add('afterSelection', (r,c,r2,c2) => this.checkRange(r,c,r2,c2));\n\n            this.observe('data', () => this.update());\n            this.observe('firstRowIsHeader', (v, vo) => {\n                if (v != vo && vo !== undefined) this.update()\n            });\n\n            this.observe('search', (query, oldquery) => {\n                if (query != oldquery) this.set({searchIndex:0});\n                const searchResults = hot.search.query(query);\n                this.set({searchResults});\n                hot.render();\n            });\n\n            this.observe('currentResult', (res) => {\n                // console.log('cur search res', res);\n                if (!res || !hot) return;\n                // this is a weird hack to deal with HoT's problems to scroll\n                // all the way down after hot.scrollViewportTo(hot.countRows()-1, res.col);\n                // the first scrollViewportTo will trigger a render event\n                hot.render(); // to update the hightlight colors\n                hot.scrollViewportTo(res.row, res.col);\n                setTimeout(() => {\n                    // one more time\n                    hot.scrollViewportTo(res.row, res.col);\n                }, 100);\n            });\n\n            this.observe('activeColumn', () => {\n                setTimeout(() => hot.render(), 10);\n            });\n\n            // if (hot.sortingEnabled) {\n            this.observe('sorting', (sorting) => {\n                hot.sort(chart.dataset().indexOf(sorting.sortBy), sorting.sortDir);\n            });\n            // }\n\n        },\n        data() {\n            return {\n                data: '',\n                readonly: false,\n                skipRows: 0,\n                firstRowIsHeader: true,\n                searchIndex: 0,\n                sortBy: '-',\n                transpose: false,\n                activeColumn: null,\n                search: '',\n                searchResults: []\n            };\n        }\n    };\n\n    function getCellRenderer(app, dataset, Handsontable) {\n        const colTypeIcons = {\n            date: 'fa fa-clock-o'\n        };\n        function HtmlCellRender(instance, TD, row, col, prop, value, cellProperties) {\n            var escaped = dw.utils.purifyHtml(Handsontable.helper.stringify(value));\n            TD.innerHTML = escaped; // this is faster than innerHTML. See: https://github.com/warpech/jquery-handsontable/wiki/JavaScript-&-DOM-performance-tips\n        }\n        return function(instance, td, row, col, prop, value, cellProperties) {\n            if (dataset.numColumns() <= col || !dataset.hasColumn(col)) return;\n            const column = dataset.column(col);\n            const {searchResults, currentResult, activeColumn} = app.get();\n            const colFormat = app.getColumnFormat(column.name());\n            row = instance.toPhysicalRow(row);\n            if (row > 0) {\n                var formatter = chart.columnFormatter(column);\n                value = formatter(column.val(row - 1), true);\n            }\n            if (parseInt(value) < 0) { // if row contains negative number\n                td.classList.add('negative');\n            }\n            td.classList.add(column.type()+'Type');\n            td.dataset.column = col;\n\n            if (column.type() == 'text' && value && value.length > 70) {\n                value = value.substr(0,60)+'…';\n            }\n\n            if (row === 0) {\n                td.classList.add('firstRow');\n                if (colTypeIcons[column.type()]) {\n                    value = '<i class=\"'+colTypeIcons[column.type()]+'\"></i> ' + value;\n                }\n            } else {\n                td.classList.add(row % 2 ? 'oddRow' : 'evenRow');\n            }\n            if (colFormat.ignore) {\n                td.classList.add('ignored');\n            }\n            if (activeColumn && activeColumn.name() == column.name()) {\n                td.classList.add('active');\n            }\n            const row_p = instance.getPlugin('columnSorting').untranslateRow(row);\n            searchResults.forEach(res => {\n                if (res.row == row_p && res.col == col) {\n                    td.classList.add('htSearchResult');\n                }\n            });\n            if (currentResult && currentResult.row == row_p && currentResult.col == col) {\n                td.classList.add('htCurrentSearchResult');\n            }\n            if (row > 0 && !column.type(true).isValid(column.val(row-1))) {\n                td.classList.add('parsingError');\n            }\n            if (cellProperties.readOnly) td.classList.add('readOnly');\n\n            if (chart.dataCellChanged(col, row)) {\n                td.classList.add('changed');\n            }\n            HtmlCellRender(instance, td, row, col, prop, value, cellProperties);\n            // Reflect.apply(HtmlCellRender, this, arguments);\n        };\n    }\n\n    function topLeftCornerClick(evt) {\n        evt.preventDefault();\n        const {transpose} = app.get();\n        app.set({transpose: !transpose});\n        app.update();\n    }\n\n    function cellHeaderClick(evt) {\n        const th = this;\n        // reset the HoT selection\n        // find out which data column we're in\n        const k = th.parentNode.children.length;\n        let th_i = -1;\n        // (stupid HTMLCollection has no indexOf)\n        for (let i=0; i<k; i++) {\n            if (th.parentNode.children.item(i) == th) {\n                th_i = i;\n                break;\n            }\n        }\n        // find column index\n        const col_i = +app.refs.hot.querySelector(`.htCore tbody tr:first-child td:nth-child(${th_i+1})`).dataset.column;\n        const chart = app.store.get('dw_chart');\n        const {activeColumn,hot} = app.get();\n        if (chart.dataset().hasColumn(col_i)) {\n            const newActive = chart.dataset().column(+col_i);\n            // set active column (or unset if it's already set)\n            if (activeColumn && activeColumn.name() == newActive.name()) {\n                evt.target.parentNode.classList.remove('selected');\n                app.set({activeColumn:false});\n                hot.deselectCell();\n            } else {\n                evt.target.parentNode.classList.add('selected');\n                app.set({activeColumn: newActive});\n            }\n        }\n    }\n\n</script>\n\n<style>:global(#data-preview) {\n  width: 770px;\n  /*height: 400px;*/\n  overflow: auto;\n}\n:global(#data-preview) tr td,\n:global(#data-preview) tr th {\n  font-family: 'Roboto Mono', fixed;\n  font-size: 12px;\n}\n:global(#data-preview) colgroup col {\n  max-width: 500px!important;\n}\n:global(#data-preview) tr td {\n  padding: 3px 6px;\n}\n:global(#data-preview) tr td.textType {\n  color: #000000;\n}\n:global(#data-preview) tr td.dateType {\n  color: #39A832;\n  text-align: center;\n}\n:global(#data-preview) tr td.numberType {\n  color: #297EA8;\n  text-align: right;\n}\n:global(#data-preview) tr td.parsingError {\n  background: #fee;\n  color: #c00;\n}\n:global(#data-preview) tr td.readOnly.firstRow {\n  background: #EAEAEA;\n  border-right-color: #aaa;\n  color: #777;\n}\n:global(#data-preview) tr td.active {\n  background: #e8f6fa;\n}\n:global(#data-preview) tr td.active.firstRow {\n  background: #d5e3e7;\n}\n:global(#data-preview) tr td.changed {\n  position: relative;\n}\n:global(#data-preview) tr td.changed:after {\n  content: ' ';\n  width: 0;\n  height: 0;\n  border-top: 7px solid orange;\n  border-right: 7px solid transparent;\n  display: block;\n  position: absolute;\n  left: 0;\n  top: 0;\n}\n:global(#data-preview) tr td.htSearchResult {\n  /*background: #ffd;*/\n  background: #fff8ef;\n  color: #8d6833!important;\n}\n:global(#data-preview) tr td.htCurrentSearchResult {\n  color: #583707!important;\n  background: #fcedd9;\n  /*background: #fffe83;*/\n}\n:global(#data-preview) thead th {\n  cursor: pointer;\n  background: #eee;\n  border-right: 1px solid #b3b3b3;\n}\n:global(#data-preview) thead th:first-child .cornerHeader:after {\n  display: block;\n  content: '';\n  width: 12px;\n  height: 12px;\n  background-image: url(/static/css/chart-editor/transpose.png);\n  background-size: contain;\n  position: absolute;\n  top: calc(50% - 6px);\n  left: calc(50% - 6px);\n}\n:global(#data-preview) thead th.selected {\n  background: #18a1cd;\n  color: white;\n  font-weight: bold;\n}\n:global(#data-preview) thead th:hover {\n  background: #ddd;\n}\n:global(#data-preview) thead th.selected:hover {\n  background: #18a1cd;\n}\n:global(#data-preview) thead tr th + th div:after {\n  position: absolute;\n  top: 3px;\n  right: 5px;\n}\n:global(#data-preview) thead th + th.selected div:after {\n  opacity: 1;\n}\n:global(#data-preview) td.ignored,\n:global(#data-preview) th.ignored {\n  color: #aaa!important;\n  text-decoration: line-through;\n  background-color: #f4f4f4;\n  /*&.area { background: #dce5f7; }*/\n}\n:global(#data-preview) td.ignored.firstRow,\n:global(#data-preview) th.ignored.firstRow {\n  background-color: #ddd;\n}\n:global(#data-preview) td.ignored.firstRow.area,\n:global(#data-preview) th.ignored.firstRow.area {\n  background: #d4ddee;\n}\n:global(#data-preview) th.ignored {\n  background-color: #e2e2e2;\n  color: #aaa;\n  text-decoration: line-through;\n}\n:global(#data-preview) tbody tr:first-child td {\n  background: #f3f3f3;\n  font-weight: bold;\n  border-bottom: 1px solid #999;\n}\n:global(#data-preview) .htCommentCell:after {\n  border-left: 8px solid transparent;\n  border-top: 8px solid orange;\n}\n:global(#data-preview) .handsontable td.area-1::before,\n:global(#data-preview) .handsontable td.area-2::before,\n:global(#data-preview) .handsontable td.area-3::before,\n:global(#data-preview) .handsontable td.area-4::before,\n:global(#data-preview) .handsontable td.area-5::before,\n:global(#data-preview) .handsontable td.area-6::before,\n:global(#data-preview) .handsontable td.area-7::before,\n:global(#data-preview) .handsontable td.area::before {\n  background: #18a1cd;\n}\n:global(#data-preview) .handsontable .columnSorting {\n  pointer-events: none;\n}\n:global(#data-preview) .handsontable .columnSorting.ascending::after {\n  font: normal normal normal 14px/1 FontAwesome;\n  content: '\\f160';\n  top: 0px;\n  right: -17px;\n}\n:global(#data-preview) .handsontable .columnSorting.descending::after {\n  font: normal normal normal 14px/1 FontAwesome;\n  content: '\\f161';\n  top: 0px;\n  right: -17px;\n}\n:global(#data-preview) .handsontable .selected .columnSorting::after {\n  color: white;\n}\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}