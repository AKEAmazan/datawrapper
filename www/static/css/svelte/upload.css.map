{
  "version": 3,
  "file": "upload.css",
  "sources": [
    "../../../../src/upload/App.html",
    "../../../../src/upload/TextAreaUpload.html",
    "../../../../src/upload/UploadHelp.html"
  ],
  "sourcesContent": [
    "<div class=\"chart-editor dw-create-upload upload-data\" on:drop=\"onFileDrop(event)\" on:dragover=\"onDragOver(event)\" on:dragenter=\"set({dragover:true})\" on:dragend=\"resetDrag()\" on:dragleave=\"resetDrag()\">\n    {{#if dragover}}\n    <div class=\"draginfo\">\n        Drag your CSV file here to upload...\n    </div>\n    {{/if}}\n    <div class=\"row\" style=\"{{dragover?'opacity: 0.5;filter:blur(6px);background:white;pointer-events:none':''}}\">\n        <div class=\"span5\">\n            <div class=\"sidebar\">\n                <h3>How to you want to upload your data?</h3>\n\n                <ul class=\"import-methods\">\n                    {{#each buttons as btn}}\n                    <li on:click=\"btnAction(btn)\" class=\"action {{active==btn.id?'active':''}}\">\n                        <label>\n                            {{#if btn.isFileUpload}}\n                            <input on:change=\"btnUpload(btn, event)\" class=\"file-upload\" type=\"file\" />\n                            {{/if}}\n                            <i class=\"{{btn.icon}}\"></i>\n                            <span>{{btn.title}}</span>\n                        </label>\n                    </li>\n                    {{/each}}\n                </ul>\n\n                <:Component {UploadHelp}\n                    bind:chartData\n                    bind:readonly\n                    bind:datasets />\n\n            </div>\n        </div>\n        <div class=\"span7\">\n\n            <:Component {Upload}\n                bind:chartData\n                bind:readonly />\n\n            <div class=\"buttons pull-right\">\n                <a href=\"describe\" class=\"submit btn btn-primary\" id=\"describe-proceed\"> {{\"Weiter\"}} <i class=\"icon-chevron-right icon-white\"></i></a>\n            </div>\n        </div>\n    </div>\n</div>\n\n<script>\n    /* global dw */\n    import TextAreaUpload from './TextAreaUpload.html';\n    import UploadHelp from './UploadHelp.html';\n    import readFile from '../shared/readFile.js';\n    import {putJSON} from '../shared/utils.js';\n\n    let app;\n\n    export default {\n        oncreate() { app = this; },\n        data() {\n            return {\n                dragover: false,\n                Upload: TextAreaUpload,\n                UploadHelp: UploadHelp,\n                active: 'copy',\n                buttons: [{\n                    id: 'copy',\n                    title: 'Copy & paste data table',\n                    icon: 'im im-copy',\n                    upload: TextAreaUpload,\n                    action() {\n\n                    }\n                },{\n                    id: 'upload',\n                    title: 'Upload CSV/TSV file',\n                    icon: 'im im-upload',\n                    upload: TextAreaUpload,\n                    isFileUpload: true,\n                    onFileUpload(event) {\n                        const file = event.target.files[0];\n                        if (file.type.substr(0,5) == 'text/') {\n                            readFile(file, (err, result) => {\n                                putJSON(`/api/charts/${dw.backend.currentChart.get('id')}/data`, result, () => {\n                                    window.location.href = 'describe';\n                                });\n                            });\n                        }\n                    },\n                    action() {}\n                }]\n            }\n        },\n        methods: {\n            btnAction (btn) {\n                this.set({active:btn.id});\n                if (btn.action) btn.action();\n                if (btn.upload) this.set({Upload:btn.upload});\n            },\n            btnUpload (btn, event) {\n                if (btn.onFileUpload) btn.onFileUpload(event);\n            },\n            onDragOver (event) {\n                event.preventDefault();\n                this.set({dragover:true});\n            },\n            resetDrag () {\n                this.set({dragover:false});\n            },\n            onFileDrop (event) {\n                // Prevent default behavior (Prevent file from being opened)\n                this.resetDrag();\n                event.preventDefault();\n                const files = [];\n                if (event.dataTransfer.items) {\n                    // Use DataTransferItemList interface to access the file(s)\n                    for (let i=0; i<event.dataTransfer.items.length; i++) {\n                        // If dropped items aren't files, reject them\n                        if (event.dataTransfer.items[i].kind === 'file') {\n                            files.push(event.dataTransfer.items[i].getAsFile());\n                        }\n                    }\n                    event.dataTransfer.items.clear();\n                } else {\n                    // Use DataTransfer interface to access the file(s)\n                    for (let i=0; i<event.dataTransfer.files.length; i++) {\n                        files.push(event.dataTransfer.files[i]);\n                    }\n                    event.dataTransfer.items.clear();\n                }\n                for (let i=0; i<files.length; i++) {\n                    if (files[i].type.substr(0,5) == 'text/') {\n                        return readFile(files[i], (err, result) => {\n                            putJSON(`/api/charts/${dw.backend.currentChart.get('id')}/data`, result, () => {\n                                window.location.href = 'describe';\n                            });\n                        });\n                    }\n                }\n            }\n        }\n    };\n</script>\n\n<style>.import-methods {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n.import-methods .action {\n  color: #1d81a2;\n  text-align: center;\n  min-height: 50px;\n  width: calc(25% - 20px);\n  margin: 0 10px 10px 0;\n  padding: 15px 0 10px;\n  overflow: hidden;\n  position: relative;\n  display: inline-block;\n  vertical-align: top;\n  cursor: pointer;\n}\n.import-methods .action:hover,\n.import-methods .action.active {\n  background: #fff;\n  border-radius: 4px;\n}\n.import-methods .action.active {\n  color: #222;\n  cursor: default;\n}\n.import-methods .action > label {\n  margin-top: -10px;\n  padding-top: 15px;\n  padding-bottom: 15px;\n  margin-bottom: -10px;\n}\n.import-methods .action > label > i {\n  display: block;\n  margin: 0 auto;\n  font-size: 24px !important;\n}\n.import-methods .action > label > span {\n  font-size: 12px;\n  line-height: 15px;\n  display: block;\n  padding: 4px 10px 0;\n}\n.import-methods .file-upload {\n  opacity: 0;\n  position: absolute;\n  z-index: -1;\n}\n.draginfo {\n  pointer-events: none;\n  height: 0;\n  position: relative;\n  top: 120px;\n  font-size: 45px;\n  width: 100%;\n  text-align: center;\n  z-index: 10;\n  font-weight: 100;\n}\n</style>\n",
    "<form class=\"upload-form\">\n\n    <div class=\"control-group\">\n        <textarea bind:value=\"chartData\" readonly=\"{{readonly}}\" id=\"upload-data-text\" style=\"resize:none\" placeholder=\"{{placeholder}}\"></textarea>\n    </div>\n\n</form>\n\n<script>\n    /* globals __,dw */\n    import {putJSON} from '../shared/utils.js';\n    import _throttle from 'underscore-es/throttle';\n\n    let app;\n    const chart = dw.backend.currentChart;\n\n    const updateData = _throttle(() => {\n        const {chartData} = app.get();\n        putJSON(`/api/charts/${chart.get('id')}/data`, chartData);\n    }, 1000);\n\n\n    export default {\n        data() {\n            return {\n                placeholder: \"Daten hier einfügen...\",\n            }\n        },\n        oncreate() {\n            app = this;\n        },\n        onupdate({changed, current, previous}) {\n            if (changed.chartData && current.chartData && previous && previous.chartData != current.chartData) {\n                updateData();\n            }\n        },\n    }\n</script>\n\n<style>\ntextarea#upload-data-text {\n    height: 260px;\n}\n</style>\n",
    "<p>{{ \"Markiere die Datentabelle in Excel oder OpenOffice (einschließlich der ersten Zeile mit den Spaltentiteln), und fügen ihn in das nebenstehende Textfeld. Alternativ kannst du auch eine CSV-Datei hochladen.\" }}</p>\n\n<div class=\"demo-datasets\">\n    <p>{{ \"Wenn du Datawrapper nur ausprobieren möchtest, kannst du eine Beispiel-Datensatz aus dieser Liste auswählen:\" }}</p>\n    <select disabled=\"{{readonly}}\" id=\"demo-datasets\" bind:value=\"selectedDataset\">\n        <option value=\"--\">{{ \"Beispiel-Datensatz auswählen\" }}</option>\n        {{#each datasetsArray as group}}\n        <optgroup label=\"{{group.type}}\">\n            {{#each group.datasets as dataset}}\n            <option value=\"{{dataset}}\" class=\"demo-dataset\">{{dataset.title}}</option>\n        {{/each}}\n        </optgroup>\n        {{/each}}\n    </select>\n</div>\n\n<style>\n    select { width: 70%; }\n</style>\n\n<script>\n\n    /* globals dw */\n    export default {\n        data() {\n            return {\n                selectedDataset: '--'\n            };\n        },\n        onupdate({changed, current}) {\n            if (changed.selectedDataset && current.selectedDataset != '--') {\n                const sel = current.selectedDataset;\n                this.set({chartData: sel.data});\n                if (sel.presets) {\n                    Object.keys(sel.presets).forEach(k => {\n                        dw.backend.currentChart.set(k, sel.presets[k]);\n                    });\n                }\n            }\n        },\n        computed: {\n            datasetsArray(datasets) {\n                return Object.keys(datasets).map(k => datasets[k]);\n            }\n        },\n    }\n</script>\n"
  ],
  "names": [],
  "mappings": "AA6IO,eAAe,cAAC,CAAC,AACtB,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,6BAAe,CAAC,OAAO,cAAC,CAAC,AACvB,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CACvB,MAAM,CAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CACrB,OAAO,CAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CACpB,QAAQ,CAAE,MAAM,CAChB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,YAAY,CACrB,cAAc,CAAE,GAAG,CACnB,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,6BAAe,CAAC,qBAAO,MAAM,CAC7B,6BAAe,CAAC,OAAO,OAAO,cAAC,CAAC,AAC9B,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,6BAAe,CAAC,OAAO,OAAO,cAAC,CAAC,AAC9B,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,6BAAe,CAAC,OAAO,CAAG,KAAK,cAAC,CAAC,AAC/B,UAAU,CAAE,KAAK,CACjB,WAAW,CAAE,IAAI,CACjB,cAAc,CAAE,IAAI,CACpB,aAAa,CAAE,KAAK,AACtB,CAAC,AACD,6BAAe,CAAC,OAAO,CAAG,KAAK,CAAG,CAAC,cAAC,CAAC,AACnC,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,SAAS,CAAE,IAAI,CAAC,UAAU,AAC5B,CAAC,AACD,6BAAe,CAAC,OAAO,CAAG,KAAK,CAAG,IAAI,cAAC,CAAC,AACtC,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,IAAI,CACjB,OAAO,CAAE,KAAK,CACd,OAAO,CAAE,GAAG,CAAC,IAAI,CAAC,CAAC,AACrB,CAAC,AACD,6BAAe,CAAC,YAAY,cAAC,CAAC,AAC5B,OAAO,CAAE,CAAC,CACV,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,EAAE,AACb,CAAC,AACD,SAAS,cAAC,CAAC,AACT,cAAc,CAAE,IAAI,CACpB,MAAM,CAAE,CAAC,CACT,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,KAAK,CACV,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,EAAE,CACX,WAAW,CAAE,GAAG,AAClB,CAAC;AChKD,QAAQ,iBAAiB,cAAC,CAAC,AACvB,MAAM,CAAE,KAAK,AACjB,CAAC;ACzBG,MAAM,eAAC,CAAC,AAAC,KAAK,CAAE,GAAG,AAAE,CAAC"
}