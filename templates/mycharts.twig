{% use "utils.twig" %}

{% extends "core.twig" %}


{% block content %}


<div class="docs">
    <div class="pull-right" style="position:relative;top:-16px">
        {{ block('pagination') }}
    </div>
    <h1 class="title">
        {% if user2 %}
            {{ "Charts by %s" | trans | replace({'%s': user2.email }) }}
{#         {% else %}
            {% trans "My Charts" %} #}
        {% endif %}
    </h1>
</div>

<style type="text/css">

.gallery-filter {
    display: flex;
    margin-bottom: 40px;
    width: 100%;
}

.gallery-filter h1 { margin-top: 0; }
.gallery-filter a { cursor: pointer; }

.gallery-filter .folder-line { align-self: flex-start; }
.gallery-filter form { margin-left: auto; }
.gallery-filter form .btn-group { margin-left: 10px; }

.folders-and-gallery { display: flex; }
.folders-and-gallery .folders { flex: 1 0 0; }
.folders-and-gallery .gallery { flex: 3 0 0;}

.gallery .thumbnails .span3.chart { min-height: 190px; }

.gallery .thumbnails .span3.chart h3 { position: static; }

.folders ul {
    list-style-type: none;
    margin-left: 0;
}

.folders ul ul { margin-left: 1em; }
.folders li { line-height: 30px; }
.folders li a {
    cursor: pointer;
    margin-right: 1em;
}
#current-folder .dropdown-menu .dropdown-menu {
    top: -6px;
    margin: 0px;
    padding: 1px;
}
#current-folder .dropdown-menu .move-links {
    top: -2px;
}

.dropdown-submenu .dropdown-menu {
    left: 100%;
    margin-top: -6px;
}

#folder-list-separator { display: none; }

</style>
<div class="gallery-filter">

    <div class="folder-line">
        <a href="{{ mycharts_base }}">{% trans "My Charts" %}</a><span id="folder-sequence"></span>
        <h1 id="current-folder">
            <div class="btn-group">
                <a class="btn dropdown-toggle" data-toggle="dropdown" href="#">
                    <i class="icon-wrench"></i>
                    <span class="caret"></span>
                </a>
                <ul class="dropdown-menu">
                    <li>
                        <a class="add-folder" tabindex="-1" href="#"><i class="icon-folder-open"></i> {% trans "Add" %}</a>
                    </li>
                    <li class="dropdown-submenu">
                        <a class="move-to-folder" style="display: none;" tabindex="-1" href="#"><i class="icon-folder-open"></i> {% trans "Move" %}</a>
                        <ul class="dropdown-menu move-links move-root"></ul>
                    </li>
                    <li><a class="delete-folder" style="display: none;" tabindex="-1" href="#"><i class="icon-remove"></i> {% trans "Remove" %}</a></li>
                </ul>
            </div>
        </h1>
    </div>

    <form method="get" class="form form-inline" action="">
        <b>{% trans "Filter" %}:</b>

        &nbsp;

        <input name="q" class="search-query input-medium" type="text" placeholder="{% trans "Search" %}" value="{{ search_query }}" />

        &nbsp;

        <div class="btn-group">
            <a class="btn dropdown-toggle" data-toggle="dropdown" href="#">
                {% trans "By Status" %}
                <span class="caret"></span>
            </a>
            <ul class="dropdown-menu">
                {% for status in bystatus %}
                {% if key == 'status' and val == status.id %}
                <li class="active"><a href="{{ mycharts_base }}/"><i class="icon-check"></i> {{ status.name }} ({{ status.count }})</a></li>
                {% else %}
                <li><a href="{{ mycharts_base }}/by/status/{{ status.id }}">{{ status.name }} ({{ status.count }})</a></li>
                {% endif %}

                {% endfor %}
            </ul>
        </div>

        <div class="btn-group">
            <a class="btn dropdown-toggle" data-toggle="dropdown" href="#">
                {% trans "By Month" %}
                <span class="caret"></span>
            </a>
            <ul class="dropdown-menu by-month">
                <!-- dropdown menu links -->
            {% for month in bymonth %}
                {% if key == 'month' and val == month.id %}
                <li class="active"><a href="{{ mycharts_base }}/"><i class="icon-check"></i> {{ month.name }} ({{ month.count }})</a> </li>
                {% else %}
                <li><a href="{{ mycharts_base }}/by/month/{{ month.id }}">{{ month.name }} ({{ month.count }})</a></li>
                {% endif %}
            {% endfor %}
            </ul>
        </div>

        <div class="btn-group">
            <a class="btn dropdown-toggle" data-toggle="dropdown" href="#">
                {% trans "By Visualisation" %}
                <span class="caret"></span>
            </a>

            <ul class="dropdown-menu">
                {% for vis in byvis %}
                {% if key == 'vis' and val == vis.id %}
                <li class="active"><a href="{{ mycharts_base }}/"><i class="icon-check"></i> {{ vis.name }} ({{ vis.count }})</a> </li>
                {% else %}
                <li><a href="{{ mycharts_base }}/by/vis/{{ vis.id }}">{{ vis.name }} ({{ vis.count }})</a></li>
                {% endif %}
                {% endfor %}
            </ul>
        </div>

{#         <div class="btn-group">
            <a class="btn dropdown-toggle" data-toggle="dropdown" href="#">
                {% trans "By Layout" %}
                <span class="caret"></span>
            </a>

            <ul class="dropdown-menu">
                {% for layout in bylayout %}
                {% if key == 'layout' and val == layout.id %}
                <li class="active"><a href="{{ mycharts_base }}/"><i class="icon-check"></i> {{ layout.name }} ({{ layout.count }})</a></li>
                {% else %}
                <li><a href="{{ mycharts_base }}/by/layout/{{ layout.id }}">{{ layout.name }} ({{ layout.count }})</a></li>
                {% endif %}

                {% endfor %}
            </ul>
        </div> #}


    </form>


</div>

<div class="folders-and-gallery">
    <div class="folders">
        <ul>
            <li><a href="{{ mycharts_base }}"><i class="icon-folder-open"></i> {% trans "My Charts" %}</a></li>
            <ul id="dynamic-tree">
            </ul>
            {% for org in organizations %}
            <li><a href="{{ mycharts_base }}/organization/{{ org.id }}"><i class="icon-folder-open"></i> {{ org.name }}</a></li>
            <ul id="dynamic-tree-{{ org.tag }}">
            </ul>
            {% endfor %}
        </ul>
    </div>
    <div class="gallery">

        {% if user.hasCharts %}
        <div class="thumbnails js-masonry" data-masonry-options='{ "itemSelector": ".grid-item", "columWidth": 200 }'>
            {% for chart in charts %}

            <div class="span3 chart" data-id="{{ chart.id }}">
                <div class="thumbnail" style="background:{{ chart.metadata.publish.background }}">
                    <a href="/{{ chart.getNamespace() }}/{{ chart.id }}/edit" >
                        <h3 style="color:{% if chart.metadata.publish.text %}{{ chart.metadata.publish.text }}{% else %}#000{% endif %};text-shadow:1px 1px 3px {% if chart.metadata.publish.background %}{{ chart.metadata.publish.background }}{% else %}#fff{% endif %};">{% if chart.title != '' %}{{ chart.title | replace({'<br/>': ' - '}) | striptags | raw }}{% else %}{{ chart.id }}{% endif %}</h3>

                        <img src="{% if chart.hasPreview %}//{{ DW_CHART_CACHE_DOMAIN }}/{{ chart.id }}/m.png{% else %}/static/img/nopreview.png{% endif %}" width="260" >
                     </a>

                     <div class="btn-group">
                        <a class="btn dropdown-toggle" data-toggle="dropdown" href="#">
                            <i class="icon-wrench"></i>
                            <span class="caret"></span>
                        </a>
                        <ul class="dropdown-menu">
                            {% if user2 %}
                            <li><a class="edit" href="#"><i class="icon-edit"></i> {% trans "Edit" %}</a></li>
                            {% endif %}
                            <li><a class="duplicate" href="#"><i class="icon-plus"></i> {% trans "Duplicate" %}</a></li>
                            {# <li><a href="/chart/{{ chart.id }}/static?w=700&amp;h=490&amp;f=pdf&amp;padding=20"><i class="icon-download"></i> {% trans "Save as PDF" %}</a></li>
                            <li class="divider"></li> #}
                            <li><a class="delete" href="#"><i class="icon-remove"></i> {% trans "Delete" %}</a></li>
                            <li class="dropdown-submenu">
                                <a tabindex="-1" href="#"><i class="icon-folder-open"></i> {% trans "Move" %}</a>
                                <ul class="dropdown-menu folder-list">
                                    <li id="folder-list-separator"></li>
                                    {% for org in organizations %}
                                    <li class="dropdown-submenu">
                                        <a tabindex="-1" href="#"><i class="icon-folder-open"></i> {{ org.id }}</a>
                                        <ul class="dropdown-menu folder-list-{{ org.tag }}"></ul>
                                    </li>
                                    {% endfor %}
                                </ul>
                            </li>
                        <!-- dropdown menu links -->
                        </ul>
                     </div>
                    {# <p>{% trans "Created" %}: {{ chart.createdAt|date() }}<br/>
                     {% trans "Layout" %}: {{ chart.theme }} </p> #}
                </div>
            </div>
            {% endfor %}
        </div>
        {% else %}

            <h2>{% trans "No charts here, yet" %}</h2>
            <p>{% trans "Why not <a href='/chart/create'>create a new chart now</a>?" %}</p>

        {% endif %}
    </div>
</div>


<div class="after-gallery row">
    <div class="span9">

        {% if not user2 %}

            {{ hook('mycharts_after_sidebar', chart, user) }}

        {% else %}

            <h3>{% trans "Switch User" %}</h3>

            <select id="switch_user" style="width:80%">
                {% for user in all_users %}
                <option {% if user == user2 %}selected="selected" {% endif %}value="{{ user.id }}">{{ user.email }}</option>
                {% endfor %}
            </select>
            <script type="text/javascript">
            $('#switch_user').change(function(e) {
                e.preventDefault();
                location.href = '/admin/charts/' + $('#switch_user').val();
            });
        </script>
        {% endif %}


    </div>

    <div class="span3">
        <div class="pull-right">
            {{ block('pagination') }}
        </div>
    </div>
</div>





<script type="text/javascript" src="/static/vendor/overlay/ender.overlay.js"></script>
<script type="text/javascript">
$(function(){

    require(['masonry', 'imagesloaded'], function(Masonry, imagesLoaded) {
        var imgLoad = imagesLoaded('.thumbnails');
        imgLoad.on('progress', _.debounce(layout, 200));
        imgLoad.on('always', layout);
        function layout() {
            setTimeout(function() {
                new Masonry('.thumbnails', {
                    itemSelector: '.chart',
                    transitionDuration: 0
                });
            }, 100);
        }
    });

  //*
  // */
   {% if user2 %}
    $('.thumbnail > a').click(function(e) {
        e.preventDefault();
        dw.backend.popupChart($(e.target).parents('.chart').data('id'), true);
    });

    $('a.edit').click(function(e) {
        e.preventDefault();
        var chart = $(e.target).parents('.chart');
        location.href = $('.thumbnail > a', chart).attr('href');
    });
   {% endif %}


    $('a.delete').click(function(e) {
        e.preventDefault();
        var chart = $(e.target).parents('.chart'),
            id = chart.data('id');
        if (window.confirm({{ "Do you really want to delete the chart? Note that after deleting this chart won\'t be embedable any more." | trans | json | raw }})) {
             $.ajax({
                url: '/api/charts/'+id,
                type: 'DELETE',
                success: function(data) {
                    chart.remove();
                }
            });
        };
    });

    $('.chart a.duplicate').click(function(e) {
        e.preventDefault();
        var id = $(e.target).parents('.chart').data('id');
        $.ajax({
            url: '/api/charts/'+id+'/copy',
            type: 'POST',
            success: function(data) {
                try {
                    if (data.status == "ok") {
                        // redirect to copied chart
                        location.href = '/chart/'+data.data.id+'/visualize';
                    } else {
                        console.warn(data);
                    }
                } catch (e) {
                    console.warn(data);
                }
            }
        });
    });
});

// what's this supposed to do?
$('body').load(function() {

});

var handler = {
    fail: function(err) {
        alert('API Error');
        console.error(err);
    },
    done: function(res) {
        if (res.status == 'error') {
            alert(res.message);
        } else if (res.status == 'ok') {
            location.reload(true);
        }
    }
};

function folder_menu(org_id, path, subfolders) {
    var menu = $('#current-folder').find(".btn-group .dropdown-menu");

    menu.find('.add-folder').click(function(e) {
        alert('Unimplemented!');
    });

    // can't delete root or folders with subfolders
    if (!(typeof(path) === 'undefined' || subfolders)) {
        menu.find('.delete-folder').click(function(e) {
            alert('Unimplemented!');
        });
    }
}

function build_folder_2_folder_movelinks(flat_list, org_id) {
    var source_path = $.data($('#current-folder')[0], "fullpath"),
        source_parent = '',
        move_menu = '';

    if (typeof(source_path) === 'undefined') return;
    source_parent = source_path.slice(0, source_path.lastIndexOf('/'));

    if (org_id) {
        $('#current-folder').find(".dropdown-menu .move-root").append("\
            <li class=\"dropdown-submenu\">\n\
                <a class=\"move-to-folder\" tabindex=\"-1\" href=\"#\"><i class=\"icon-folder-open\"></i> " + org_id + "</a>\n\
                <ul class=\"dropdown-menu move-links move-org\"></ul>\n\
            </li>\n\
        ");
        move_menu = $('#current-folder').find(".dropdown-menu .move-org").last();
    } else {
        move_menu = $('#current-folder').find(".dropdown-menu .move-root");
    }

    flat_list.forEach(function(folder) {
        var l = document.createElement('li'),
            a = document.createElement('a'),
            put_url = '/api/folders/dir/';

        // Do not create links for subfolders of this path
        if ($.data($('#current-folder')[0], 'organization') === org_id &&
            (folder === source_path ||
            folder.startsWith(source_path) ||
            (source_parent !== '' && folder.startsWith(source_parent)) ||
            folder === '/')) return;

        a.innerText = folder;
        a.setAttribute('href', '#');
        $(a).click(function(e) {
            e.preventDefault();
            alert("Unimplemented!");
        });
        l.appendChild(a);
        move_menu.append(l);
    });
};

function build_line(path, tree) {
    var cwd, mypath,
        line = $('#folder-sequence'),
        sep = ' > ';

    mypath = Array.from(path);
    cwd = mypath.pop();

    mypath.forEach(function(dir) {
        var a = document.createElement('a'),
            folder;

        a.innerText = dir;
        folder = tree.reduce(function(old, cur) {
            return (!old && cur.name === dir) ? cur : old;
        }, false);
        a.setAttribute('href', '{{ mycharts_base }}/by/folder/' + folder.id);
        line.append(sep, a);
        tree = folder.sub
    });
    line.append(sep);
    $('#current-folder').prepend(cwd);
};

function build_tree_list(branch, parent, org_id, flatter, path, pathstring, tree) {
    var filter = {
        key: '{{key}}',
        val: '{{val}}'
    },
        folder_icon = '<i class="icon-folder-open"></i>',
        nu_path,
        seper = $('#folder-list-separator'),
        org_tag = (org_id) ? '-' + org_id.replace(' ','-').replace(/[^a-zA-Z0-9-]/g,'') : '';

    // first pass, initialize data
    if (typeof(path) === 'undefined') {
        path = [];
        pathstring = '';
        tree = branch;
    }

    branch.forEach(function(folder) {
        var l1 = document.createElement('li'),
            a1 = document.createElement('a'),
            l2 = document.createElement('li'),
            a2 = document.createElement('a'),
            org_snipplet = (org_id) ? '/organization/' + org_id : '';

        a1.innerHTML = folder_icon + ' ' + folder.name;
        if (folder.charts > 0)
            a1.innerHTML += ' (' + folder.charts + ')';
        a1.setAttribute('href', '{{ mycharts_base }}' + org_snipplet + '/by/folder/' + folder.id);

        nu_path = path.concat(folder.name);
        nu_pstr = pathstring + '/' + folder.name;
        flatter(nu_pstr);

        l1.appendChild(a1);
        parent.append(l1);

        // filter "by folder" will be removed soon™
        if (filter.key === 'folder' && filter.val == folder.id) {
            var curfol = $('#current-folder');
            // hijack this pass to build active folder line
            build_line(nu_path, tree);
            folder_menu(org_id, nu_pstr.slice(1), folder.sub != false); //last param evaluates to bool
            curfol.find('.btn-group .move-to-folder,.delete-folder').show();
            $.data(curfol[0], 'fullpath', nu_pstr);
            $.data(curfol[0], 'organization', org_id);
        } else {
            // or append this folder to the MoveTo submenu
            a2.innerHTML = nu_pstr;
            a2.setAttribute('href', '#');
            a2.setAttribute('tabindex', '-1');
            l2.appendChild(a2);

            if (org_id) {
                $('.dropdown-menu .folder-list .folder-list' + org_tag).append(l2);
            } else {
                $(l2).insertBefore(seper);
            }
        }

        if (folder.sub) {
            var nu_par = document.createElement('ul');
            parent.append(nu_par);
            build_tree_list(folder.sub, $(nu_par), org_id, flatter, nu_path, nu_pstr, tree);
        }
    });
};

function add_chart_move_function() {
    $('.chart .folder-list a').click(function(e) {
        alert('Unimplemented!');
    });
};

function treelist_wrapper(folder_obj) {
    var flatened_tree = ['/'],
        entrypoint = '#dynamic-tree',
        org_id = (folder_obj.organization) ? folder_obj.organization.id : false;

    if (org_id) {
        var org_tag = '-' + org_id.replace(' ','-').replace(/[^a-zA-Z0-9-]/g,'');
        entrypoint += org_tag;
        $('.dropdown-menu .folder-list .folder-list' + org_tag).append('<li><a href="#" tabindex=-1>/</a></li>');
    } else {
        $('<li><a href="#" tabindex=-1>/</a></li>').insertBefore($('#folder-list-separator'));
    }

    build_tree_list(folder_obj.folders, $(entrypoint), org_id, function(path) {
        flatened_tree.push(path);
    });

    return flatened_tree;
};

function remove_empty_folder_move_targets() {
    $('#current-folder .move-org').each(function(idx, move_org){
        var list = $(move_org);
        if (!list.find('li').length)
            list.parent().remove();
    });
}

function treeyfy(tree) {
    tree.map(function(group) {
        if (group.type === "user")
            group.organization = false;
        delete(group.type);
        group.folders.forEach(function(folder) {
            delete(folder.type);
            delete(folder.user);
            delete(folder.organization);
            folder.sub = group.folders.filter(function(potential_subfolder) {
                return (potential_subfolder.parent == folder.id) ? true : false;
            });
            if (!folder.sub.length)
                folder.sub = false;
        });
        group.folders = group.folders.filter(function(folder) {
            return (folder.parent == null) ? true : false;
        });
    });

    tree = tree.sort(function(a, b) {
        if (!a.organization) return -1;
        if (!b.organization) return 1;
        return a.organization.name.localeCompare(b.organization.name);
    });

    return tree;
}

function get_folders(tree) {
    var walked_tree = [],
        cleaned_tree;

    cleaned_tree = treeyfy(tree);

    cleaned_tree.forEach(function(folder_obj) {
        walked_tree.push(treelist_wrapper(folder_obj));
    });
    add_chart_move_function();
    cleaned_tree.forEach(function(folder_obj, idx) {
        build_folder_2_folder_movelinks(walked_tree[idx], (folder_obj.organization) ? folder_obj.organization.id : false);
    });
    remove_empty_folder_move_targets();
}

$('document').ready(function() {
    get_folders({{ preload | json | raw }});
});

</script>

{{ parent() }}
{% endblock %}
