{% extends "core.twig" %}

{% block content %}

<link rel="stylesheet" type="text/css" href="/static/css/svelte/controls.css">

<script type="text/javascript" src="{{workflow.path_js}}"></script>
<link rel="stylesheet" type="text/css" href="{{workflow.path_css}}">


<div class="svelte-editor-base" id="svelte-workflow-{{ workflow.id }}"></div>

<script type="text/javascript">

require(['{{workflow.module}}'], function(mod) {

    var App = mod.App,
        data = _.extend({
            active: {{chart.lastEditStep}},
            maxStep: {{chart.lastEditStep}},
        step: '{{step}}',
        visualization: {{vis|json|raw}}
        }, mod.data || {}, {{ twig_data | json | raw }});

    var chart = new mod.Chart({{chart.toStruct()|json|raw}});
    var getJSON = mod.utils.getJSON;
    var themeCache = {};
    themeCache['{{theme.id}}'] = {{theme.themeData|json|raw}};

    chart.set({
        writable: true,
        themeData: themeCache['{{theme.id}}']
    });

    chart.on('state', ({changed, current, previous}) => {
        // observe theme changes and load new theme data if needed
        console.log('chart.state', changed);
        if (changed.theme) {
            if (themeCache[current.theme]) {
                // re-use cached theme
                chart.set({themeData: themeCache[current.theme]});
            } else {
                // load new theme data
                getJSON(`/api/themes/${current.theme}`, (res) => {
                    if (res.status == 'ok') {
                        themeCache[current.theme] = res.data.data;
                        chart.set({themeData: res.data.data});
                    } else {
                        console.warn('theme not loaded', res);
                    }
                });
            }
        }
        if (previous && changed.title || changed.theme || changed.type || changed.metadata) {
            console.log('store!', changed, Object.keys(changed).map(k => k+':'+current[k]));
            chart.store();
        }
    });

    window.history.replaceState({}, '', '/edit/{{chart.id}}/{{step}}');

    var app = mod.app = new App({
        store: chart,
        target: document.querySelector('#svelte-workflow-{{ workflow.id }}'),
        data: data
    });
});
</script>


{% endblock %}
