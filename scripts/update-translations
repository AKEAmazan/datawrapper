#!/usr/bin/env node

const fs = require('fs');
const yaml = require('js-yaml');
const _ = require('underscore');
const chalk = require('chalk');
const {csvParse} = require('d3-dsv');
const {queue} = require('d3-queue');
const request = require('request');

const config = yaml.safeLoad(fs.readFileSync('./config.yaml'));



if (config.translation) {
    queue(2)
        .defer(getSheet, config.translation.core)
        .defer(getSheet, config.translation.plugins)
        .await((err, core, plugins) => {
            // write core locales/*.json
            writeLocales(core, './locale');

            _.each(_.groupBy(plugins, 'plugin'), (src, k) => {
                if (fs.existsSync(`./plugins/${k}`)) {
                    writeLocales(src, `./plugins/${k}/locale`);
                } else {
                    console.log(chalk.yellowBright.bold(' ⚇ '), 'ignoring missing plugin', chalk.bold(k));
                }
            });

            // fs.writeFileSync(sheets[0].dest.replace('.csv', '.json'), JSON.stringify(d, null, 3));
            // fs.unlinkSync(sheets[0].dest);
            console.log('Done.');
        });
}

function getSheet(url, callback) {
    request(url, (err, res, body) => {
        callback(null, csvParse(body));
    });
}


function writeLocales(src, path) {
    if (!fs.existsSync(path)) fs.mkdir(path);
    var err = false;
    config.languages.forEach((lang) => {
        const f = `${path}/${lang.id.replace('-','_')}.json`;
        try {
            fs.accessSync(f, fs.constants.R_OK | fs.constants.W_OK);
        } catch (e) {
            console.error(chalk.red(' ✖ '), 'no permission to write', f);
            err = true;
            return;
        }
        const locale = {};
        src.forEach((row) => {
            if (row.key) locale[row.key] = row[lang.id];
        });
        fs.writeFileSync(f, JSON.stringify(locale, null, 2));
    });
    if (!err) console.log(chalk.green(' ✔ ')+' updated translations for', chalk.bold(src[0].plugin || 'core'));
}
